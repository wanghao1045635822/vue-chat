// source: office.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

//var jspb = require('google-protobuf');//前
import * as jspb from 'google-protobuf';//后
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.C2SAcceptOfficeRadioReq', null, global);
goog.exportSymbol('proto.C2SEndOfficeRadioReq', null, global);
goog.exportSymbol('proto.C2SEnterOfficeAreaReq', null, global);
goog.exportSymbol('proto.C2SFindOfficeWorkerReq', null, global);
goog.exportSymbol('proto.C2SGetOfficeAreaListReq', null, global);
goog.exportSymbol('proto.C2SGetOfficeWorkerListReq', null, global);
goog.exportSymbol('proto.C2SLeaveOfficeAreaReq', null, global);
goog.exportSymbol('proto.C2SOfficeChatReq', null, global);
goog.exportSymbol('proto.C2SOfficeFastShareOperateReq', null, global);
goog.exportSymbol('proto.C2SOfficeFastShareReq', null, global);
goog.exportSymbol('proto.C2SOfficeMeetingCameraStateReq', null, global);
goog.exportSymbol('proto.C2SOfficeMeetingClearReq', null, global);
goog.exportSymbol('proto.C2SOfficeMeetingCreateReq', null, global);
goog.exportSymbol('proto.C2SOfficeMeetingJoinReq', null, global);
goog.exportSymbol('proto.C2SOfficeMeetingListReq', null, global);
goog.exportSymbol('proto.C2SOfficeMeetingVoiceStateReq', null, global);
goog.exportSymbol('proto.C2SOfficeMeetingWorkerInviteReq', null, global);
goog.exportSymbol('proto.C2SOfficeMeetingWorkerQuitReq', null, global);
goog.exportSymbol('proto.C2SOfficeMeetingWorkerRomoveReq', null, global);
goog.exportSymbol('proto.C2SSetCameraStateReq', null, global);
goog.exportSymbol('proto.C2SSetVoiceStateReq', null, global);
goog.exportSymbol('proto.C2SSetWorkStateReq', null, global);
goog.exportSymbol('proto.C2SStartOfficeRadioReq', null, global);
goog.exportSymbol('proto.MsgOfficeRoomInfo', null, global);
goog.exportSymbol('proto.MsgOfficeWorkerInfo', null, global);
goog.exportSymbol('proto.S2CAcceptOfficeRadioAck', null, global);
goog.exportSymbol('proto.S2CEndOfficeRadioAck', null, global);
goog.exportSymbol('proto.S2CEnterOfficeAreaAck', null, global);
goog.exportSymbol('proto.S2CFindOfficeWorkerAck', null, global);
goog.exportSymbol('proto.S2CGetOfficeAreaListAck', null, global);
goog.exportSymbol('proto.S2CGetOfficeWorkerListAck', null, global);
goog.exportSymbol('proto.S2CLeaveOfficeAreaAck', null, global);
goog.exportSymbol('proto.S2COfficeChatAck', null, global);
goog.exportSymbol('proto.S2COfficeFastShareAck', null, global);
goog.exportSymbol('proto.S2COfficeFastShareOperateAck', null, global);
goog.exportSymbol('proto.S2COfficeMeetingCameraStateAck', null, global);
goog.exportSymbol('proto.S2COfficeMeetingClearAck', null, global);
goog.exportSymbol('proto.S2COfficeMeetingCreateAck', null, global);
goog.exportSymbol('proto.S2COfficeMeetingJoinAck', null, global);
goog.exportSymbol('proto.S2COfficeMeetingListAck', null, global);
goog.exportSymbol('proto.S2COfficeMeetingVoiceStateAck', null, global);
goog.exportSymbol('proto.S2COfficeMeetingWorkerInviteAck', null, global);
goog.exportSymbol('proto.S2COfficeMeetingWorkerQuitAck', null, global);
goog.exportSymbol('proto.S2COfficeMeetingWorkerRomoveAck', null, global);
goog.exportSymbol('proto.S2CSetCameraStateAck', null, global);
goog.exportSymbol('proto.S2CSetVoiceStateAck', null, global);
goog.exportSymbol('proto.S2CSetWorkStateAck', null, global);
goog.exportSymbol('proto.S2CStartOfficeRadioAck', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgOfficeRoomInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgOfficeRoomInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MsgOfficeRoomInfo.displayName = 'proto.MsgOfficeRoomInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgOfficeWorkerInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgOfficeWorkerInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MsgOfficeWorkerInfo.displayName = 'proto.MsgOfficeWorkerInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.C2SGetOfficeAreaListReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.C2SGetOfficeAreaListReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.C2SGetOfficeAreaListReq.displayName = 'proto.C2SGetOfficeAreaListReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.S2CGetOfficeAreaListAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.S2CGetOfficeAreaListAck.repeatedFields_, null);
};
goog.inherits(proto.S2CGetOfficeAreaListAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.S2CGetOfficeAreaListAck.displayName = 'proto.S2CGetOfficeAreaListAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.C2SEnterOfficeAreaReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.C2SEnterOfficeAreaReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.C2SEnterOfficeAreaReq.displayName = 'proto.C2SEnterOfficeAreaReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.S2CEnterOfficeAreaAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.S2CEnterOfficeAreaAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.S2CEnterOfficeAreaAck.displayName = 'proto.S2CEnterOfficeAreaAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.C2SLeaveOfficeAreaReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.C2SLeaveOfficeAreaReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.C2SLeaveOfficeAreaReq.displayName = 'proto.C2SLeaveOfficeAreaReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.S2CLeaveOfficeAreaAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.S2CLeaveOfficeAreaAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.S2CLeaveOfficeAreaAck.displayName = 'proto.S2CLeaveOfficeAreaAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.C2SGetOfficeWorkerListReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.C2SGetOfficeWorkerListReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.C2SGetOfficeWorkerListReq.displayName = 'proto.C2SGetOfficeWorkerListReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.S2CGetOfficeWorkerListAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.S2CGetOfficeWorkerListAck.repeatedFields_, null);
};
goog.inherits(proto.S2CGetOfficeWorkerListAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.S2CGetOfficeWorkerListAck.displayName = 'proto.S2CGetOfficeWorkerListAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.C2SSetCameraStateReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.C2SSetCameraStateReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.C2SSetCameraStateReq.displayName = 'proto.C2SSetCameraStateReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.S2CSetCameraStateAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.S2CSetCameraStateAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.S2CSetCameraStateAck.displayName = 'proto.S2CSetCameraStateAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.C2SSetVoiceStateReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.C2SSetVoiceStateReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.C2SSetVoiceStateReq.displayName = 'proto.C2SSetVoiceStateReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.S2CSetVoiceStateAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.S2CSetVoiceStateAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.S2CSetVoiceStateAck.displayName = 'proto.S2CSetVoiceStateAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.C2SFindOfficeWorkerReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.C2SFindOfficeWorkerReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.C2SFindOfficeWorkerReq.displayName = 'proto.C2SFindOfficeWorkerReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.S2CFindOfficeWorkerAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.S2CFindOfficeWorkerAck.repeatedFields_, null);
};
goog.inherits(proto.S2CFindOfficeWorkerAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.S2CFindOfficeWorkerAck.displayName = 'proto.S2CFindOfficeWorkerAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.C2SSetWorkStateReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.C2SSetWorkStateReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.C2SSetWorkStateReq.displayName = 'proto.C2SSetWorkStateReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.S2CSetWorkStateAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.S2CSetWorkStateAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.S2CSetWorkStateAck.displayName = 'proto.S2CSetWorkStateAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.C2SStartOfficeRadioReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.C2SStartOfficeRadioReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.C2SStartOfficeRadioReq.displayName = 'proto.C2SStartOfficeRadioReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.S2CStartOfficeRadioAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.S2CStartOfficeRadioAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.S2CStartOfficeRadioAck.displayName = 'proto.S2CStartOfficeRadioAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.C2SEndOfficeRadioReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.C2SEndOfficeRadioReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.C2SEndOfficeRadioReq.displayName = 'proto.C2SEndOfficeRadioReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.S2CEndOfficeRadioAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.S2CEndOfficeRadioAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.S2CEndOfficeRadioAck.displayName = 'proto.S2CEndOfficeRadioAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.C2SOfficeChatReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.C2SOfficeChatReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.C2SOfficeChatReq.displayName = 'proto.C2SOfficeChatReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.S2COfficeChatAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.S2COfficeChatAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.S2COfficeChatAck.displayName = 'proto.S2COfficeChatAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.C2SAcceptOfficeRadioReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.C2SAcceptOfficeRadioReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.C2SAcceptOfficeRadioReq.displayName = 'proto.C2SAcceptOfficeRadioReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.S2CAcceptOfficeRadioAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.S2CAcceptOfficeRadioAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.S2CAcceptOfficeRadioAck.displayName = 'proto.S2CAcceptOfficeRadioAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.C2SOfficeFastShareReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.C2SOfficeFastShareReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.C2SOfficeFastShareReq.displayName = 'proto.C2SOfficeFastShareReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.S2COfficeFastShareAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.S2COfficeFastShareAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.S2COfficeFastShareAck.displayName = 'proto.S2COfficeFastShareAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.C2SOfficeFastShareOperateReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.C2SOfficeFastShareOperateReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.C2SOfficeFastShareOperateReq.displayName = 'proto.C2SOfficeFastShareOperateReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.S2COfficeFastShareOperateAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.S2COfficeFastShareOperateAck.repeatedFields_, null);
};
goog.inherits(proto.S2COfficeFastShareOperateAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.S2COfficeFastShareOperateAck.displayName = 'proto.S2COfficeFastShareOperateAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.C2SOfficeMeetingCreateReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.C2SOfficeMeetingCreateReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.C2SOfficeMeetingCreateReq.displayName = 'proto.C2SOfficeMeetingCreateReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.S2COfficeMeetingCreateAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.S2COfficeMeetingCreateAck.repeatedFields_, null);
};
goog.inherits(proto.S2COfficeMeetingCreateAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.S2COfficeMeetingCreateAck.displayName = 'proto.S2COfficeMeetingCreateAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.C2SOfficeMeetingJoinReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.C2SOfficeMeetingJoinReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.C2SOfficeMeetingJoinReq.displayName = 'proto.C2SOfficeMeetingJoinReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.S2COfficeMeetingJoinAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.S2COfficeMeetingJoinAck.repeatedFields_, null);
};
goog.inherits(proto.S2COfficeMeetingJoinAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.S2COfficeMeetingJoinAck.displayName = 'proto.S2COfficeMeetingJoinAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.C2SOfficeMeetingListReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.C2SOfficeMeetingListReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.C2SOfficeMeetingListReq.displayName = 'proto.C2SOfficeMeetingListReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.S2COfficeMeetingListAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.S2COfficeMeetingListAck.repeatedFields_, null);
};
goog.inherits(proto.S2COfficeMeetingListAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.S2COfficeMeetingListAck.displayName = 'proto.S2COfficeMeetingListAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.C2SOfficeMeetingClearReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.C2SOfficeMeetingClearReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.C2SOfficeMeetingClearReq.displayName = 'proto.C2SOfficeMeetingClearReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.S2COfficeMeetingClearAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.S2COfficeMeetingClearAck.repeatedFields_, null);
};
goog.inherits(proto.S2COfficeMeetingClearAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.S2COfficeMeetingClearAck.displayName = 'proto.S2COfficeMeetingClearAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.C2SOfficeMeetingCameraStateReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.C2SOfficeMeetingCameraStateReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.C2SOfficeMeetingCameraStateReq.displayName = 'proto.C2SOfficeMeetingCameraStateReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.S2COfficeMeetingCameraStateAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.S2COfficeMeetingCameraStateAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.S2COfficeMeetingCameraStateAck.displayName = 'proto.S2COfficeMeetingCameraStateAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.C2SOfficeMeetingVoiceStateReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.C2SOfficeMeetingVoiceStateReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.C2SOfficeMeetingVoiceStateReq.displayName = 'proto.C2SOfficeMeetingVoiceStateReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.S2COfficeMeetingVoiceStateAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.S2COfficeMeetingVoiceStateAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.S2COfficeMeetingVoiceStateAck.displayName = 'proto.S2COfficeMeetingVoiceStateAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.C2SOfficeMeetingWorkerRomoveReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.C2SOfficeMeetingWorkerRomoveReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.C2SOfficeMeetingWorkerRomoveReq.displayName = 'proto.C2SOfficeMeetingWorkerRomoveReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.S2COfficeMeetingWorkerRomoveAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.S2COfficeMeetingWorkerRomoveAck.repeatedFields_, null);
};
goog.inherits(proto.S2COfficeMeetingWorkerRomoveAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.S2COfficeMeetingWorkerRomoveAck.displayName = 'proto.S2COfficeMeetingWorkerRomoveAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.C2SOfficeMeetingWorkerInviteReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.C2SOfficeMeetingWorkerInviteReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.C2SOfficeMeetingWorkerInviteReq.displayName = 'proto.C2SOfficeMeetingWorkerInviteReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.S2COfficeMeetingWorkerInviteAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.S2COfficeMeetingWorkerInviteAck.repeatedFields_, null);
};
goog.inherits(proto.S2COfficeMeetingWorkerInviteAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.S2COfficeMeetingWorkerInviteAck.displayName = 'proto.S2COfficeMeetingWorkerInviteAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.C2SOfficeMeetingWorkerQuitReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.C2SOfficeMeetingWorkerQuitReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.C2SOfficeMeetingWorkerQuitReq.displayName = 'proto.C2SOfficeMeetingWorkerQuitReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.S2COfficeMeetingWorkerQuitAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.S2COfficeMeetingWorkerQuitAck.repeatedFields_, null);
};
goog.inherits(proto.S2COfficeMeetingWorkerQuitAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.S2COfficeMeetingWorkerQuitAck.displayName = 'proto.S2COfficeMeetingWorkerQuitAck';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgOfficeRoomInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgOfficeRoomInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgOfficeRoomInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgOfficeRoomInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roomname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    roomscreenshotsid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    sceneid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    scenekey: jspb.Message.getFieldWithDefault(msg, 5, 0),
    onlinenum: jspb.Message.getFieldWithDefault(msg, 6, 0),
    trtcroomid: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgOfficeRoomInfo}
 */
proto.MsgOfficeRoomInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgOfficeRoomInfo;
  return proto.MsgOfficeRoomInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgOfficeRoomInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgOfficeRoomInfo}
 */
proto.MsgOfficeRoomInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomname(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomscreenshotsid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSceneid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScenekey(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOnlinenum(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrtcroomid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgOfficeRoomInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgOfficeRoomInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgOfficeRoomInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgOfficeRoomInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRoomname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRoomscreenshotsid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getSceneid();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getScenekey();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getOnlinenum();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getTrtcroomid();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional int32 roomId = 1;
 * @return {number}
 */
proto.MsgOfficeRoomInfo.prototype.getRoomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgOfficeRoomInfo} returns this
 */
proto.MsgOfficeRoomInfo.prototype.setRoomid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string roomName = 2;
 * @return {string}
 */
proto.MsgOfficeRoomInfo.prototype.getRoomname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.MsgOfficeRoomInfo} returns this
 */
proto.MsgOfficeRoomInfo.prototype.setRoomname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 roomScreenshotsId = 3;
 * @return {number}
 */
proto.MsgOfficeRoomInfo.prototype.getRoomscreenshotsid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgOfficeRoomInfo} returns this
 */
proto.MsgOfficeRoomInfo.prototype.setRoomscreenshotsid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 sceneId = 4;
 * @return {number}
 */
proto.MsgOfficeRoomInfo.prototype.getSceneid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgOfficeRoomInfo} returns this
 */
proto.MsgOfficeRoomInfo.prototype.setSceneid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 sceneKey = 5;
 * @return {number}
 */
proto.MsgOfficeRoomInfo.prototype.getScenekey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgOfficeRoomInfo} returns this
 */
proto.MsgOfficeRoomInfo.prototype.setScenekey = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 onlineNum = 6;
 * @return {number}
 */
proto.MsgOfficeRoomInfo.prototype.getOnlinenum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgOfficeRoomInfo} returns this
 */
proto.MsgOfficeRoomInfo.prototype.setOnlinenum = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string trtcRoomId = 7;
 * @return {string}
 */
proto.MsgOfficeRoomInfo.prototype.getTrtcroomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.MsgOfficeRoomInfo} returns this
 */
proto.MsgOfficeRoomInfo.prototype.setTrtcroomid = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgOfficeWorkerInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgOfficeWorkerInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgOfficeWorkerInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgOfficeWorkerInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    roleId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    icon: jspb.Message.getFieldWithDefault(msg, 2, 0),
    roleName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    workerId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    realName: jspb.Message.getFieldWithDefault(msg, 5, ""),
    phone: jspb.Message.getFieldWithDefault(msg, 6, ""),
    email: jspb.Message.getFieldWithDefault(msg, 7, ""),
    departmentId: jspb.Message.getFieldWithDefault(msg, 8, 0),
    group: jspb.Message.getFieldWithDefault(msg, 9, 0),
    post: jspb.Message.getFieldWithDefault(msg, 10, 0),
    rank: jspb.Message.getFieldWithDefault(msg, 11, 0),
    entryTime: jspb.Message.getFieldWithDefault(msg, 12, 0),
    contractLimit: jspb.Message.getFieldWithDefault(msg, 13, 0),
    workState: jspb.Message.getFieldWithDefault(msg, 14, 0),
    cameraState: jspb.Message.getFieldWithDefault(msg, 15, 0),
    voiceState: jspb.Message.getFieldWithDefault(msg, 16, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgOfficeWorkerInfo}
 */
proto.MsgOfficeWorkerInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgOfficeWorkerInfo;
  return proto.MsgOfficeWorkerInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgOfficeWorkerInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgOfficeWorkerInfo}
 */
proto.MsgOfficeWorkerInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoleId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIcon(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoleName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWorkerId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setRealName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDepartmentId(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGroup(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPost(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRank(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEntryTime(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setContractLimit(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWorkState(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCameraState(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVoiceState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgOfficeWorkerInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgOfficeWorkerInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgOfficeWorkerInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgOfficeWorkerInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoleId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getIcon();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getRoleName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getWorkerId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getRealName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPhone();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getDepartmentId();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getGroup();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getPost();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getRank();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getEntryTime();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getContractLimit();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getWorkState();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getCameraState();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getVoiceState();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
};


/**
 * optional int32 role_id = 1;
 * @return {number}
 */
proto.MsgOfficeWorkerInfo.prototype.getRoleId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgOfficeWorkerInfo} returns this
 */
proto.MsgOfficeWorkerInfo.prototype.setRoleId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 icon = 2;
 * @return {number}
 */
proto.MsgOfficeWorkerInfo.prototype.getIcon = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgOfficeWorkerInfo} returns this
 */
proto.MsgOfficeWorkerInfo.prototype.setIcon = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string role_name = 3;
 * @return {string}
 */
proto.MsgOfficeWorkerInfo.prototype.getRoleName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.MsgOfficeWorkerInfo} returns this
 */
proto.MsgOfficeWorkerInfo.prototype.setRoleName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 worker_id = 4;
 * @return {number}
 */
proto.MsgOfficeWorkerInfo.prototype.getWorkerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgOfficeWorkerInfo} returns this
 */
proto.MsgOfficeWorkerInfo.prototype.setWorkerId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string real_name = 5;
 * @return {string}
 */
proto.MsgOfficeWorkerInfo.prototype.getRealName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.MsgOfficeWorkerInfo} returns this
 */
proto.MsgOfficeWorkerInfo.prototype.setRealName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string phone = 6;
 * @return {string}
 */
proto.MsgOfficeWorkerInfo.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.MsgOfficeWorkerInfo} returns this
 */
proto.MsgOfficeWorkerInfo.prototype.setPhone = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string email = 7;
 * @return {string}
 */
proto.MsgOfficeWorkerInfo.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.MsgOfficeWorkerInfo} returns this
 */
proto.MsgOfficeWorkerInfo.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional int32 department_id = 8;
 * @return {number}
 */
proto.MsgOfficeWorkerInfo.prototype.getDepartmentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgOfficeWorkerInfo} returns this
 */
proto.MsgOfficeWorkerInfo.prototype.setDepartmentId = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 group = 9;
 * @return {number}
 */
proto.MsgOfficeWorkerInfo.prototype.getGroup = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgOfficeWorkerInfo} returns this
 */
proto.MsgOfficeWorkerInfo.prototype.setGroup = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 post = 10;
 * @return {number}
 */
proto.MsgOfficeWorkerInfo.prototype.getPost = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgOfficeWorkerInfo} returns this
 */
proto.MsgOfficeWorkerInfo.prototype.setPost = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 rank = 11;
 * @return {number}
 */
proto.MsgOfficeWorkerInfo.prototype.getRank = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgOfficeWorkerInfo} returns this
 */
proto.MsgOfficeWorkerInfo.prototype.setRank = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int64 entry_time = 12;
 * @return {number}
 */
proto.MsgOfficeWorkerInfo.prototype.getEntryTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgOfficeWorkerInfo} returns this
 */
proto.MsgOfficeWorkerInfo.prototype.setEntryTime = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 contract_limit = 13;
 * @return {number}
 */
proto.MsgOfficeWorkerInfo.prototype.getContractLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgOfficeWorkerInfo} returns this
 */
proto.MsgOfficeWorkerInfo.prototype.setContractLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int32 work_state = 14;
 * @return {number}
 */
proto.MsgOfficeWorkerInfo.prototype.getWorkState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgOfficeWorkerInfo} returns this
 */
proto.MsgOfficeWorkerInfo.prototype.setWorkState = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int32 camera_state = 15;
 * @return {number}
 */
proto.MsgOfficeWorkerInfo.prototype.getCameraState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgOfficeWorkerInfo} returns this
 */
proto.MsgOfficeWorkerInfo.prototype.setCameraState = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int32 voice_state = 16;
 * @return {number}
 */
proto.MsgOfficeWorkerInfo.prototype.getVoiceState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgOfficeWorkerInfo} returns this
 */
proto.MsgOfficeWorkerInfo.prototype.setVoiceState = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.C2SGetOfficeAreaListReq.prototype.toObject = function(opt_includeInstance) {
  return proto.C2SGetOfficeAreaListReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.C2SGetOfficeAreaListReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SGetOfficeAreaListReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.C2SGetOfficeAreaListReq}
 */
proto.C2SGetOfficeAreaListReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.C2SGetOfficeAreaListReq;
  return proto.C2SGetOfficeAreaListReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.C2SGetOfficeAreaListReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.C2SGetOfficeAreaListReq}
 */
proto.C2SGetOfficeAreaListReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.C2SGetOfficeAreaListReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.C2SGetOfficeAreaListReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.C2SGetOfficeAreaListReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SGetOfficeAreaListReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.S2CGetOfficeAreaListAck.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.S2CGetOfficeAreaListAck.prototype.toObject = function(opt_includeInstance) {
  return proto.S2CGetOfficeAreaListAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.S2CGetOfficeAreaListAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2CGetOfficeAreaListAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    errcode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    infosList: jspb.Message.toObjectList(msg.getInfosList(),
    proto.MsgOfficeRoomInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.S2CGetOfficeAreaListAck}
 */
proto.S2CGetOfficeAreaListAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.S2CGetOfficeAreaListAck;
  return proto.S2CGetOfficeAreaListAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.S2CGetOfficeAreaListAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.S2CGetOfficeAreaListAck}
 */
proto.S2CGetOfficeAreaListAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrcode(value);
      break;
    case 2:
      var value = new proto.MsgOfficeRoomInfo;
      reader.readMessage(value,proto.MsgOfficeRoomInfo.deserializeBinaryFromReader);
      msg.addInfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.S2CGetOfficeAreaListAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.S2CGetOfficeAreaListAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.S2CGetOfficeAreaListAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2CGetOfficeAreaListAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrcode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.MsgOfficeRoomInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 errCode = 1;
 * @return {number}
 */
proto.S2CGetOfficeAreaListAck.prototype.getErrcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2CGetOfficeAreaListAck} returns this
 */
proto.S2CGetOfficeAreaListAck.prototype.setErrcode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated MsgOfficeRoomInfo infos = 2;
 * @return {!Array<!proto.MsgOfficeRoomInfo>}
 */
proto.S2CGetOfficeAreaListAck.prototype.getInfosList = function() {
  return /** @type{!Array<!proto.MsgOfficeRoomInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MsgOfficeRoomInfo, 2));
};


/**
 * @param {!Array<!proto.MsgOfficeRoomInfo>} value
 * @return {!proto.S2CGetOfficeAreaListAck} returns this
*/
proto.S2CGetOfficeAreaListAck.prototype.setInfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.MsgOfficeRoomInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MsgOfficeRoomInfo}
 */
proto.S2CGetOfficeAreaListAck.prototype.addInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.MsgOfficeRoomInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.S2CGetOfficeAreaListAck} returns this
 */
proto.S2CGetOfficeAreaListAck.prototype.clearInfosList = function() {
  return this.setInfosList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.C2SEnterOfficeAreaReq.prototype.toObject = function(opt_includeInstance) {
  return proto.C2SEnterOfficeAreaReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.C2SEnterOfficeAreaReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SEnterOfficeAreaReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    sceneid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    scenekey: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.C2SEnterOfficeAreaReq}
 */
proto.C2SEnterOfficeAreaReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.C2SEnterOfficeAreaReq;
  return proto.C2SEnterOfficeAreaReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.C2SEnterOfficeAreaReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.C2SEnterOfficeAreaReq}
 */
proto.C2SEnterOfficeAreaReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSceneid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScenekey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.C2SEnterOfficeAreaReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.C2SEnterOfficeAreaReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.C2SEnterOfficeAreaReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SEnterOfficeAreaReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSceneid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getScenekey();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 sceneId = 1;
 * @return {number}
 */
proto.C2SEnterOfficeAreaReq.prototype.getSceneid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SEnterOfficeAreaReq} returns this
 */
proto.C2SEnterOfficeAreaReq.prototype.setSceneid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 sceneKey = 2;
 * @return {number}
 */
proto.C2SEnterOfficeAreaReq.prototype.getScenekey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SEnterOfficeAreaReq} returns this
 */
proto.C2SEnterOfficeAreaReq.prototype.setScenekey = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.S2CEnterOfficeAreaAck.prototype.toObject = function(opt_includeInstance) {
  return proto.S2CEnterOfficeAreaAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.S2CEnterOfficeAreaAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2CEnterOfficeAreaAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    errcode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    radioroleid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    radiorolename: jspb.Message.getFieldWithDefault(msg, 3, ""),
    trtcroomid: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.S2CEnterOfficeAreaAck}
 */
proto.S2CEnterOfficeAreaAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.S2CEnterOfficeAreaAck;
  return proto.S2CEnterOfficeAreaAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.S2CEnterOfficeAreaAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.S2CEnterOfficeAreaAck}
 */
proto.S2CEnterOfficeAreaAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrcode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRadioroleid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRadiorolename(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrtcroomid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.S2CEnterOfficeAreaAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.S2CEnterOfficeAreaAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.S2CEnterOfficeAreaAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2CEnterOfficeAreaAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrcode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRadioroleid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getRadiorolename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTrtcroomid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int32 errCode = 1;
 * @return {number}
 */
proto.S2CEnterOfficeAreaAck.prototype.getErrcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2CEnterOfficeAreaAck} returns this
 */
proto.S2CEnterOfficeAreaAck.prototype.setErrcode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 radioRoleId = 2;
 * @return {number}
 */
proto.S2CEnterOfficeAreaAck.prototype.getRadioroleid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2CEnterOfficeAreaAck} returns this
 */
proto.S2CEnterOfficeAreaAck.prototype.setRadioroleid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string radioRoleName = 3;
 * @return {string}
 */
proto.S2CEnterOfficeAreaAck.prototype.getRadiorolename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.S2CEnterOfficeAreaAck} returns this
 */
proto.S2CEnterOfficeAreaAck.prototype.setRadiorolename = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string trtcRoomId = 4;
 * @return {string}
 */
proto.S2CEnterOfficeAreaAck.prototype.getTrtcroomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.S2CEnterOfficeAreaAck} returns this
 */
proto.S2CEnterOfficeAreaAck.prototype.setTrtcroomid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.C2SLeaveOfficeAreaReq.prototype.toObject = function(opt_includeInstance) {
  return proto.C2SLeaveOfficeAreaReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.C2SLeaveOfficeAreaReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SLeaveOfficeAreaReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    sceneid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    scenekey: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.C2SLeaveOfficeAreaReq}
 */
proto.C2SLeaveOfficeAreaReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.C2SLeaveOfficeAreaReq;
  return proto.C2SLeaveOfficeAreaReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.C2SLeaveOfficeAreaReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.C2SLeaveOfficeAreaReq}
 */
proto.C2SLeaveOfficeAreaReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSceneid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScenekey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.C2SLeaveOfficeAreaReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.C2SLeaveOfficeAreaReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.C2SLeaveOfficeAreaReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SLeaveOfficeAreaReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSceneid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getScenekey();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 sceneId = 1;
 * @return {number}
 */
proto.C2SLeaveOfficeAreaReq.prototype.getSceneid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SLeaveOfficeAreaReq} returns this
 */
proto.C2SLeaveOfficeAreaReq.prototype.setSceneid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 sceneKey = 2;
 * @return {number}
 */
proto.C2SLeaveOfficeAreaReq.prototype.getScenekey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SLeaveOfficeAreaReq} returns this
 */
proto.C2SLeaveOfficeAreaReq.prototype.setScenekey = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.S2CLeaveOfficeAreaAck.prototype.toObject = function(opt_includeInstance) {
  return proto.S2CLeaveOfficeAreaAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.S2CLeaveOfficeAreaAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2CLeaveOfficeAreaAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    roleId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    rolecount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    errcode: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.S2CLeaveOfficeAreaAck}
 */
proto.S2CLeaveOfficeAreaAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.S2CLeaveOfficeAreaAck;
  return proto.S2CLeaveOfficeAreaAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.S2CLeaveOfficeAreaAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.S2CLeaveOfficeAreaAck}
 */
proto.S2CLeaveOfficeAreaAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoleId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRolecount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.S2CLeaveOfficeAreaAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.S2CLeaveOfficeAreaAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.S2CLeaveOfficeAreaAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2CLeaveOfficeAreaAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoleId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRolecount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getErrcode();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 role_id = 1;
 * @return {number}
 */
proto.S2CLeaveOfficeAreaAck.prototype.getRoleId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2CLeaveOfficeAreaAck} returns this
 */
proto.S2CLeaveOfficeAreaAck.prototype.setRoleId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 roleCount = 2;
 * @return {number}
 */
proto.S2CLeaveOfficeAreaAck.prototype.getRolecount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2CLeaveOfficeAreaAck} returns this
 */
proto.S2CLeaveOfficeAreaAck.prototype.setRolecount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 errCode = 3;
 * @return {number}
 */
proto.S2CLeaveOfficeAreaAck.prototype.getErrcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2CLeaveOfficeAreaAck} returns this
 */
proto.S2CLeaveOfficeAreaAck.prototype.setErrcode = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.C2SGetOfficeWorkerListReq.prototype.toObject = function(opt_includeInstance) {
  return proto.C2SGetOfficeWorkerListReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.C2SGetOfficeWorkerListReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SGetOfficeWorkerListReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    sceneid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    scenekey: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.C2SGetOfficeWorkerListReq}
 */
proto.C2SGetOfficeWorkerListReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.C2SGetOfficeWorkerListReq;
  return proto.C2SGetOfficeWorkerListReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.C2SGetOfficeWorkerListReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.C2SGetOfficeWorkerListReq}
 */
proto.C2SGetOfficeWorkerListReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSceneid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScenekey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.C2SGetOfficeWorkerListReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.C2SGetOfficeWorkerListReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.C2SGetOfficeWorkerListReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SGetOfficeWorkerListReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSceneid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getScenekey();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 sceneId = 1;
 * @return {number}
 */
proto.C2SGetOfficeWorkerListReq.prototype.getSceneid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SGetOfficeWorkerListReq} returns this
 */
proto.C2SGetOfficeWorkerListReq.prototype.setSceneid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 sceneKey = 2;
 * @return {number}
 */
proto.C2SGetOfficeWorkerListReq.prototype.getScenekey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SGetOfficeWorkerListReq} returns this
 */
proto.C2SGetOfficeWorkerListReq.prototype.setScenekey = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.S2CGetOfficeWorkerListAck.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.S2CGetOfficeWorkerListAck.prototype.toObject = function(opt_includeInstance) {
  return proto.S2CGetOfficeWorkerListAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.S2CGetOfficeWorkerListAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2CGetOfficeWorkerListAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    errcode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    infosList: jspb.Message.toObjectList(msg.getInfosList(),
    proto.MsgOfficeWorkerInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.S2CGetOfficeWorkerListAck}
 */
proto.S2CGetOfficeWorkerListAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.S2CGetOfficeWorkerListAck;
  return proto.S2CGetOfficeWorkerListAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.S2CGetOfficeWorkerListAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.S2CGetOfficeWorkerListAck}
 */
proto.S2CGetOfficeWorkerListAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrcode(value);
      break;
    case 2:
      var value = new proto.MsgOfficeWorkerInfo;
      reader.readMessage(value,proto.MsgOfficeWorkerInfo.deserializeBinaryFromReader);
      msg.addInfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.S2CGetOfficeWorkerListAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.S2CGetOfficeWorkerListAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.S2CGetOfficeWorkerListAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2CGetOfficeWorkerListAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrcode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.MsgOfficeWorkerInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 errCode = 1;
 * @return {number}
 */
proto.S2CGetOfficeWorkerListAck.prototype.getErrcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2CGetOfficeWorkerListAck} returns this
 */
proto.S2CGetOfficeWorkerListAck.prototype.setErrcode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated MsgOfficeWorkerInfo infos = 2;
 * @return {!Array<!proto.MsgOfficeWorkerInfo>}
 */
proto.S2CGetOfficeWorkerListAck.prototype.getInfosList = function() {
  return /** @type{!Array<!proto.MsgOfficeWorkerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MsgOfficeWorkerInfo, 2));
};


/**
 * @param {!Array<!proto.MsgOfficeWorkerInfo>} value
 * @return {!proto.S2CGetOfficeWorkerListAck} returns this
*/
proto.S2CGetOfficeWorkerListAck.prototype.setInfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.MsgOfficeWorkerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MsgOfficeWorkerInfo}
 */
proto.S2CGetOfficeWorkerListAck.prototype.addInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.MsgOfficeWorkerInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.S2CGetOfficeWorkerListAck} returns this
 */
proto.S2CGetOfficeWorkerListAck.prototype.clearInfosList = function() {
  return this.setInfosList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.C2SSetCameraStateReq.prototype.toObject = function(opt_includeInstance) {
  return proto.C2SSetCameraStateReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.C2SSetCameraStateReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SSetCameraStateReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    sceneid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    scenekey: jspb.Message.getFieldWithDefault(msg, 2, 0),
    opt: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.C2SSetCameraStateReq}
 */
proto.C2SSetCameraStateReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.C2SSetCameraStateReq;
  return proto.C2SSetCameraStateReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.C2SSetCameraStateReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.C2SSetCameraStateReq}
 */
proto.C2SSetCameraStateReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSceneid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScenekey(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOpt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.C2SSetCameraStateReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.C2SSetCameraStateReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.C2SSetCameraStateReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SSetCameraStateReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSceneid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getScenekey();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getOpt();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 sceneId = 1;
 * @return {number}
 */
proto.C2SSetCameraStateReq.prototype.getSceneid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SSetCameraStateReq} returns this
 */
proto.C2SSetCameraStateReq.prototype.setSceneid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 sceneKey = 2;
 * @return {number}
 */
proto.C2SSetCameraStateReq.prototype.getScenekey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SSetCameraStateReq} returns this
 */
proto.C2SSetCameraStateReq.prototype.setScenekey = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 opt = 3;
 * @return {number}
 */
proto.C2SSetCameraStateReq.prototype.getOpt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SSetCameraStateReq} returns this
 */
proto.C2SSetCameraStateReq.prototype.setOpt = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.S2CSetCameraStateAck.prototype.toObject = function(opt_includeInstance) {
  return proto.S2CSetCameraStateAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.S2CSetCameraStateAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2CSetCameraStateAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    errcode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roleid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    opt: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.S2CSetCameraStateAck}
 */
proto.S2CSetCameraStateAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.S2CSetCameraStateAck;
  return proto.S2CSetCameraStateAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.S2CSetCameraStateAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.S2CSetCameraStateAck}
 */
proto.S2CSetCameraStateAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrcode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoleid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOpt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.S2CSetCameraStateAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.S2CSetCameraStateAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.S2CSetCameraStateAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2CSetCameraStateAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrcode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRoleid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getOpt();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 errCode = 1;
 * @return {number}
 */
proto.S2CSetCameraStateAck.prototype.getErrcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2CSetCameraStateAck} returns this
 */
proto.S2CSetCameraStateAck.prototype.setErrcode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 roleId = 2;
 * @return {number}
 */
proto.S2CSetCameraStateAck.prototype.getRoleid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2CSetCameraStateAck} returns this
 */
proto.S2CSetCameraStateAck.prototype.setRoleid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 opt = 3;
 * @return {number}
 */
proto.S2CSetCameraStateAck.prototype.getOpt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2CSetCameraStateAck} returns this
 */
proto.S2CSetCameraStateAck.prototype.setOpt = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.C2SSetVoiceStateReq.prototype.toObject = function(opt_includeInstance) {
  return proto.C2SSetVoiceStateReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.C2SSetVoiceStateReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SSetVoiceStateReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    sceneid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    scenekey: jspb.Message.getFieldWithDefault(msg, 2, 0),
    opt: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.C2SSetVoiceStateReq}
 */
proto.C2SSetVoiceStateReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.C2SSetVoiceStateReq;
  return proto.C2SSetVoiceStateReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.C2SSetVoiceStateReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.C2SSetVoiceStateReq}
 */
proto.C2SSetVoiceStateReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSceneid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScenekey(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOpt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.C2SSetVoiceStateReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.C2SSetVoiceStateReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.C2SSetVoiceStateReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SSetVoiceStateReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSceneid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getScenekey();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getOpt();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 sceneId = 1;
 * @return {number}
 */
proto.C2SSetVoiceStateReq.prototype.getSceneid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SSetVoiceStateReq} returns this
 */
proto.C2SSetVoiceStateReq.prototype.setSceneid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 sceneKey = 2;
 * @return {number}
 */
proto.C2SSetVoiceStateReq.prototype.getScenekey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SSetVoiceStateReq} returns this
 */
proto.C2SSetVoiceStateReq.prototype.setScenekey = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 opt = 3;
 * @return {number}
 */
proto.C2SSetVoiceStateReq.prototype.getOpt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SSetVoiceStateReq} returns this
 */
proto.C2SSetVoiceStateReq.prototype.setOpt = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.S2CSetVoiceStateAck.prototype.toObject = function(opt_includeInstance) {
  return proto.S2CSetVoiceStateAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.S2CSetVoiceStateAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2CSetVoiceStateAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    errcode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roleid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    opt: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.S2CSetVoiceStateAck}
 */
proto.S2CSetVoiceStateAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.S2CSetVoiceStateAck;
  return proto.S2CSetVoiceStateAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.S2CSetVoiceStateAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.S2CSetVoiceStateAck}
 */
proto.S2CSetVoiceStateAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrcode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoleid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOpt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.S2CSetVoiceStateAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.S2CSetVoiceStateAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.S2CSetVoiceStateAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2CSetVoiceStateAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrcode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRoleid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getOpt();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 errCode = 1;
 * @return {number}
 */
proto.S2CSetVoiceStateAck.prototype.getErrcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2CSetVoiceStateAck} returns this
 */
proto.S2CSetVoiceStateAck.prototype.setErrcode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 roleId = 2;
 * @return {number}
 */
proto.S2CSetVoiceStateAck.prototype.getRoleid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2CSetVoiceStateAck} returns this
 */
proto.S2CSetVoiceStateAck.prototype.setRoleid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 opt = 3;
 * @return {number}
 */
proto.S2CSetVoiceStateAck.prototype.getOpt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2CSetVoiceStateAck} returns this
 */
proto.S2CSetVoiceStateAck.prototype.setOpt = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.C2SFindOfficeWorkerReq.prototype.toObject = function(opt_includeInstance) {
  return proto.C2SFindOfficeWorkerReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.C2SFindOfficeWorkerReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SFindOfficeWorkerReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    companyId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.C2SFindOfficeWorkerReq}
 */
proto.C2SFindOfficeWorkerReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.C2SFindOfficeWorkerReq;
  return proto.C2SFindOfficeWorkerReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.C2SFindOfficeWorkerReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.C2SFindOfficeWorkerReq}
 */
proto.C2SFindOfficeWorkerReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCompanyId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.C2SFindOfficeWorkerReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.C2SFindOfficeWorkerReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.C2SFindOfficeWorkerReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SFindOfficeWorkerReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCompanyId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 company_id = 1;
 * @return {number}
 */
proto.C2SFindOfficeWorkerReq.prototype.getCompanyId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SFindOfficeWorkerReq} returns this
 */
proto.C2SFindOfficeWorkerReq.prototype.setCompanyId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.C2SFindOfficeWorkerReq.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.C2SFindOfficeWorkerReq} returns this
 */
proto.C2SFindOfficeWorkerReq.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.S2CFindOfficeWorkerAck.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.S2CFindOfficeWorkerAck.prototype.toObject = function(opt_includeInstance) {
  return proto.S2CFindOfficeWorkerAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.S2CFindOfficeWorkerAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2CFindOfficeWorkerAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    errcode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    infosList: jspb.Message.toObjectList(msg.getInfosList(),
    proto.MsgOfficeWorkerInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.S2CFindOfficeWorkerAck}
 */
proto.S2CFindOfficeWorkerAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.S2CFindOfficeWorkerAck;
  return proto.S2CFindOfficeWorkerAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.S2CFindOfficeWorkerAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.S2CFindOfficeWorkerAck}
 */
proto.S2CFindOfficeWorkerAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrcode(value);
      break;
    case 2:
      var value = new proto.MsgOfficeWorkerInfo;
      reader.readMessage(value,proto.MsgOfficeWorkerInfo.deserializeBinaryFromReader);
      msg.addInfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.S2CFindOfficeWorkerAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.S2CFindOfficeWorkerAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.S2CFindOfficeWorkerAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2CFindOfficeWorkerAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrcode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.MsgOfficeWorkerInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 errCode = 1;
 * @return {number}
 */
proto.S2CFindOfficeWorkerAck.prototype.getErrcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2CFindOfficeWorkerAck} returns this
 */
proto.S2CFindOfficeWorkerAck.prototype.setErrcode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated MsgOfficeWorkerInfo infos = 2;
 * @return {!Array<!proto.MsgOfficeWorkerInfo>}
 */
proto.S2CFindOfficeWorkerAck.prototype.getInfosList = function() {
  return /** @type{!Array<!proto.MsgOfficeWorkerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MsgOfficeWorkerInfo, 2));
};


/**
 * @param {!Array<!proto.MsgOfficeWorkerInfo>} value
 * @return {!proto.S2CFindOfficeWorkerAck} returns this
*/
proto.S2CFindOfficeWorkerAck.prototype.setInfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.MsgOfficeWorkerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MsgOfficeWorkerInfo}
 */
proto.S2CFindOfficeWorkerAck.prototype.addInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.MsgOfficeWorkerInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.S2CFindOfficeWorkerAck} returns this
 */
proto.S2CFindOfficeWorkerAck.prototype.clearInfosList = function() {
  return this.setInfosList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.C2SSetWorkStateReq.prototype.toObject = function(opt_includeInstance) {
  return proto.C2SSetWorkStateReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.C2SSetWorkStateReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SSetWorkStateReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    sceneid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    scenekey: jspb.Message.getFieldWithDefault(msg, 2, 0),
    state: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.C2SSetWorkStateReq}
 */
proto.C2SSetWorkStateReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.C2SSetWorkStateReq;
  return proto.C2SSetWorkStateReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.C2SSetWorkStateReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.C2SSetWorkStateReq}
 */
proto.C2SSetWorkStateReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSceneid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScenekey(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.C2SSetWorkStateReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.C2SSetWorkStateReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.C2SSetWorkStateReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SSetWorkStateReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSceneid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getScenekey();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 sceneId = 1;
 * @return {number}
 */
proto.C2SSetWorkStateReq.prototype.getSceneid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SSetWorkStateReq} returns this
 */
proto.C2SSetWorkStateReq.prototype.setSceneid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 sceneKey = 2;
 * @return {number}
 */
proto.C2SSetWorkStateReq.prototype.getScenekey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SSetWorkStateReq} returns this
 */
proto.C2SSetWorkStateReq.prototype.setScenekey = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 state = 3;
 * @return {number}
 */
proto.C2SSetWorkStateReq.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SSetWorkStateReq} returns this
 */
proto.C2SSetWorkStateReq.prototype.setState = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.S2CSetWorkStateAck.prototype.toObject = function(opt_includeInstance) {
  return proto.S2CSetWorkStateAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.S2CSetWorkStateAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2CSetWorkStateAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    errcode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roleid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    state: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.S2CSetWorkStateAck}
 */
proto.S2CSetWorkStateAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.S2CSetWorkStateAck;
  return proto.S2CSetWorkStateAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.S2CSetWorkStateAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.S2CSetWorkStateAck}
 */
proto.S2CSetWorkStateAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrcode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoleid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.S2CSetWorkStateAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.S2CSetWorkStateAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.S2CSetWorkStateAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2CSetWorkStateAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrcode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRoleid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 errCode = 1;
 * @return {number}
 */
proto.S2CSetWorkStateAck.prototype.getErrcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2CSetWorkStateAck} returns this
 */
proto.S2CSetWorkStateAck.prototype.setErrcode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 roleId = 2;
 * @return {number}
 */
proto.S2CSetWorkStateAck.prototype.getRoleid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2CSetWorkStateAck} returns this
 */
proto.S2CSetWorkStateAck.prototype.setRoleid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 state = 3;
 * @return {number}
 */
proto.S2CSetWorkStateAck.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2CSetWorkStateAck} returns this
 */
proto.S2CSetWorkStateAck.prototype.setState = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.C2SStartOfficeRadioReq.prototype.toObject = function(opt_includeInstance) {
  return proto.C2SStartOfficeRadioReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.C2SStartOfficeRadioReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SStartOfficeRadioReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    sceneid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    scenekey: jspb.Message.getFieldWithDefault(msg, 2, 0),
    trtcroomid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.C2SStartOfficeRadioReq}
 */
proto.C2SStartOfficeRadioReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.C2SStartOfficeRadioReq;
  return proto.C2SStartOfficeRadioReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.C2SStartOfficeRadioReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.C2SStartOfficeRadioReq}
 */
proto.C2SStartOfficeRadioReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSceneid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScenekey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrtcroomid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.C2SStartOfficeRadioReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.C2SStartOfficeRadioReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.C2SStartOfficeRadioReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SStartOfficeRadioReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSceneid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getScenekey();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTrtcroomid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 sceneId = 1;
 * @return {number}
 */
proto.C2SStartOfficeRadioReq.prototype.getSceneid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SStartOfficeRadioReq} returns this
 */
proto.C2SStartOfficeRadioReq.prototype.setSceneid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 sceneKey = 2;
 * @return {number}
 */
proto.C2SStartOfficeRadioReq.prototype.getScenekey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SStartOfficeRadioReq} returns this
 */
proto.C2SStartOfficeRadioReq.prototype.setScenekey = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string trtcRoomId = 3;
 * @return {string}
 */
proto.C2SStartOfficeRadioReq.prototype.getTrtcroomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.C2SStartOfficeRadioReq} returns this
 */
proto.C2SStartOfficeRadioReq.prototype.setTrtcroomid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.S2CStartOfficeRadioAck.prototype.toObject = function(opt_includeInstance) {
  return proto.S2CStartOfficeRadioAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.S2CStartOfficeRadioAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2CStartOfficeRadioAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    errcode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    radioroleid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    radiorolename: jspb.Message.getFieldWithDefault(msg, 3, ""),
    trtcroomid: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.S2CStartOfficeRadioAck}
 */
proto.S2CStartOfficeRadioAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.S2CStartOfficeRadioAck;
  return proto.S2CStartOfficeRadioAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.S2CStartOfficeRadioAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.S2CStartOfficeRadioAck}
 */
proto.S2CStartOfficeRadioAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrcode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRadioroleid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRadiorolename(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrtcroomid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.S2CStartOfficeRadioAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.S2CStartOfficeRadioAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.S2CStartOfficeRadioAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2CStartOfficeRadioAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrcode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRadioroleid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getRadiorolename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTrtcroomid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int32 errCode = 1;
 * @return {number}
 */
proto.S2CStartOfficeRadioAck.prototype.getErrcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2CStartOfficeRadioAck} returns this
 */
proto.S2CStartOfficeRadioAck.prototype.setErrcode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 radioRoleId = 2;
 * @return {number}
 */
proto.S2CStartOfficeRadioAck.prototype.getRadioroleid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2CStartOfficeRadioAck} returns this
 */
proto.S2CStartOfficeRadioAck.prototype.setRadioroleid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string radioRoleName = 3;
 * @return {string}
 */
proto.S2CStartOfficeRadioAck.prototype.getRadiorolename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.S2CStartOfficeRadioAck} returns this
 */
proto.S2CStartOfficeRadioAck.prototype.setRadiorolename = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string trtcRoomId = 4;
 * @return {string}
 */
proto.S2CStartOfficeRadioAck.prototype.getTrtcroomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.S2CStartOfficeRadioAck} returns this
 */
proto.S2CStartOfficeRadioAck.prototype.setTrtcroomid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.C2SEndOfficeRadioReq.prototype.toObject = function(opt_includeInstance) {
  return proto.C2SEndOfficeRadioReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.C2SEndOfficeRadioReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SEndOfficeRadioReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    sceneid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    scenekey: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.C2SEndOfficeRadioReq}
 */
proto.C2SEndOfficeRadioReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.C2SEndOfficeRadioReq;
  return proto.C2SEndOfficeRadioReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.C2SEndOfficeRadioReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.C2SEndOfficeRadioReq}
 */
proto.C2SEndOfficeRadioReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSceneid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScenekey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.C2SEndOfficeRadioReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.C2SEndOfficeRadioReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.C2SEndOfficeRadioReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SEndOfficeRadioReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSceneid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getScenekey();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 sceneId = 1;
 * @return {number}
 */
proto.C2SEndOfficeRadioReq.prototype.getSceneid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SEndOfficeRadioReq} returns this
 */
proto.C2SEndOfficeRadioReq.prototype.setSceneid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 sceneKey = 2;
 * @return {number}
 */
proto.C2SEndOfficeRadioReq.prototype.getScenekey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SEndOfficeRadioReq} returns this
 */
proto.C2SEndOfficeRadioReq.prototype.setScenekey = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.S2CEndOfficeRadioAck.prototype.toObject = function(opt_includeInstance) {
  return proto.S2CEndOfficeRadioAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.S2CEndOfficeRadioAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2CEndOfficeRadioAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    errcode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roleid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    rolename: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.S2CEndOfficeRadioAck}
 */
proto.S2CEndOfficeRadioAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.S2CEndOfficeRadioAck;
  return proto.S2CEndOfficeRadioAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.S2CEndOfficeRadioAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.S2CEndOfficeRadioAck}
 */
proto.S2CEndOfficeRadioAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrcode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoleid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRolename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.S2CEndOfficeRadioAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.S2CEndOfficeRadioAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.S2CEndOfficeRadioAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2CEndOfficeRadioAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrcode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRoleid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getRolename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 errCode = 1;
 * @return {number}
 */
proto.S2CEndOfficeRadioAck.prototype.getErrcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2CEndOfficeRadioAck} returns this
 */
proto.S2CEndOfficeRadioAck.prototype.setErrcode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 roleId = 2;
 * @return {number}
 */
proto.S2CEndOfficeRadioAck.prototype.getRoleid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2CEndOfficeRadioAck} returns this
 */
proto.S2CEndOfficeRadioAck.prototype.setRoleid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string roleName = 3;
 * @return {string}
 */
proto.S2CEndOfficeRadioAck.prototype.getRolename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.S2CEndOfficeRadioAck} returns this
 */
proto.S2CEndOfficeRadioAck.prototype.setRolename = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.C2SOfficeChatReq.prototype.toObject = function(opt_includeInstance) {
  return proto.C2SOfficeChatReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.C2SOfficeChatReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SOfficeChatReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    sceneid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    scenekey: jspb.Message.getFieldWithDefault(msg, 2, 0),
    roleid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    text: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.C2SOfficeChatReq}
 */
proto.C2SOfficeChatReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.C2SOfficeChatReq;
  return proto.C2SOfficeChatReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.C2SOfficeChatReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.C2SOfficeChatReq}
 */
proto.C2SOfficeChatReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSceneid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScenekey(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoleid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.C2SOfficeChatReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.C2SOfficeChatReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.C2SOfficeChatReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SOfficeChatReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSceneid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getScenekey();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getRoleid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int32 sceneId = 1;
 * @return {number}
 */
proto.C2SOfficeChatReq.prototype.getSceneid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SOfficeChatReq} returns this
 */
proto.C2SOfficeChatReq.prototype.setSceneid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 sceneKey = 2;
 * @return {number}
 */
proto.C2SOfficeChatReq.prototype.getScenekey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SOfficeChatReq} returns this
 */
proto.C2SOfficeChatReq.prototype.setScenekey = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 roleId = 3;
 * @return {number}
 */
proto.C2SOfficeChatReq.prototype.getRoleid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SOfficeChatReq} returns this
 */
proto.C2SOfficeChatReq.prototype.setRoleid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string text = 4;
 * @return {string}
 */
proto.C2SOfficeChatReq.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.C2SOfficeChatReq} returns this
 */
proto.C2SOfficeChatReq.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.S2COfficeChatAck.prototype.toObject = function(opt_includeInstance) {
  return proto.S2COfficeChatAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.S2COfficeChatAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2COfficeChatAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    errcode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roleid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    rolename: jspb.Message.getFieldWithDefault(msg, 3, ""),
    text: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.S2COfficeChatAck}
 */
proto.S2COfficeChatAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.S2COfficeChatAck;
  return proto.S2COfficeChatAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.S2COfficeChatAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.S2COfficeChatAck}
 */
proto.S2COfficeChatAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrcode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoleid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRolename(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.S2COfficeChatAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.S2COfficeChatAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.S2COfficeChatAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2COfficeChatAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrcode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRoleid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getRolename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int32 errCode = 1;
 * @return {number}
 */
proto.S2COfficeChatAck.prototype.getErrcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2COfficeChatAck} returns this
 */
proto.S2COfficeChatAck.prototype.setErrcode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 roleId = 2;
 * @return {number}
 */
proto.S2COfficeChatAck.prototype.getRoleid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2COfficeChatAck} returns this
 */
proto.S2COfficeChatAck.prototype.setRoleid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string roleName = 3;
 * @return {string}
 */
proto.S2COfficeChatAck.prototype.getRolename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.S2COfficeChatAck} returns this
 */
proto.S2COfficeChatAck.prototype.setRolename = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string text = 4;
 * @return {string}
 */
proto.S2COfficeChatAck.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.S2COfficeChatAck} returns this
 */
proto.S2COfficeChatAck.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.C2SAcceptOfficeRadioReq.prototype.toObject = function(opt_includeInstance) {
  return proto.C2SAcceptOfficeRadioReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.C2SAcceptOfficeRadioReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SAcceptOfficeRadioReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    sceneid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    scenekey: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.C2SAcceptOfficeRadioReq}
 */
proto.C2SAcceptOfficeRadioReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.C2SAcceptOfficeRadioReq;
  return proto.C2SAcceptOfficeRadioReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.C2SAcceptOfficeRadioReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.C2SAcceptOfficeRadioReq}
 */
proto.C2SAcceptOfficeRadioReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSceneid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScenekey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.C2SAcceptOfficeRadioReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.C2SAcceptOfficeRadioReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.C2SAcceptOfficeRadioReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SAcceptOfficeRadioReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSceneid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getScenekey();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 sceneId = 1;
 * @return {number}
 */
proto.C2SAcceptOfficeRadioReq.prototype.getSceneid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SAcceptOfficeRadioReq} returns this
 */
proto.C2SAcceptOfficeRadioReq.prototype.setSceneid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 sceneKey = 2;
 * @return {number}
 */
proto.C2SAcceptOfficeRadioReq.prototype.getScenekey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SAcceptOfficeRadioReq} returns this
 */
proto.C2SAcceptOfficeRadioReq.prototype.setScenekey = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.S2CAcceptOfficeRadioAck.prototype.toObject = function(opt_includeInstance) {
  return proto.S2CAcceptOfficeRadioAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.S2CAcceptOfficeRadioAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2CAcceptOfficeRadioAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    errcode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    joinradionum: jspb.Message.getFieldWithDefault(msg, 2, 0),
    acceptroleid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    camerastate: jspb.Message.getFieldWithDefault(msg, 4, 0),
    voicestate: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.S2CAcceptOfficeRadioAck}
 */
proto.S2CAcceptOfficeRadioAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.S2CAcceptOfficeRadioAck;
  return proto.S2CAcceptOfficeRadioAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.S2CAcceptOfficeRadioAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.S2CAcceptOfficeRadioAck}
 */
proto.S2CAcceptOfficeRadioAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrcode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setJoinradionum(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAcceptroleid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCamerastate(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVoicestate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.S2CAcceptOfficeRadioAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.S2CAcceptOfficeRadioAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.S2CAcceptOfficeRadioAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2CAcceptOfficeRadioAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrcode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getJoinradionum();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getAcceptroleid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getCamerastate();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getVoicestate();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional int32 errCode = 1;
 * @return {number}
 */
proto.S2CAcceptOfficeRadioAck.prototype.getErrcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2CAcceptOfficeRadioAck} returns this
 */
proto.S2CAcceptOfficeRadioAck.prototype.setErrcode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 joinRadioNum = 2;
 * @return {number}
 */
proto.S2CAcceptOfficeRadioAck.prototype.getJoinradionum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2CAcceptOfficeRadioAck} returns this
 */
proto.S2CAcceptOfficeRadioAck.prototype.setJoinradionum = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 acceptRoleId = 3;
 * @return {number}
 */
proto.S2CAcceptOfficeRadioAck.prototype.getAcceptroleid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2CAcceptOfficeRadioAck} returns this
 */
proto.S2CAcceptOfficeRadioAck.prototype.setAcceptroleid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 cameraState = 4;
 * @return {number}
 */
proto.S2CAcceptOfficeRadioAck.prototype.getCamerastate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2CAcceptOfficeRadioAck} returns this
 */
proto.S2CAcceptOfficeRadioAck.prototype.setCamerastate = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 voiceState = 5;
 * @return {number}
 */
proto.S2CAcceptOfficeRadioAck.prototype.getVoicestate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2CAcceptOfficeRadioAck} returns this
 */
proto.S2CAcceptOfficeRadioAck.prototype.setVoicestate = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.C2SOfficeFastShareReq.prototype.toObject = function(opt_includeInstance) {
  return proto.C2SOfficeFastShareReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.C2SOfficeFastShareReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SOfficeFastShareReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    roleId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    shareType: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.C2SOfficeFastShareReq}
 */
proto.C2SOfficeFastShareReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.C2SOfficeFastShareReq;
  return proto.C2SOfficeFastShareReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.C2SOfficeFastShareReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.C2SOfficeFastShareReq}
 */
proto.C2SOfficeFastShareReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoleId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setShareType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.C2SOfficeFastShareReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.C2SOfficeFastShareReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.C2SOfficeFastShareReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SOfficeFastShareReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoleId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getShareType();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 role_id = 1;
 * @return {number}
 */
proto.C2SOfficeFastShareReq.prototype.getRoleId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SOfficeFastShareReq} returns this
 */
proto.C2SOfficeFastShareReq.prototype.setRoleId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 share_type = 2;
 * @return {number}
 */
proto.C2SOfficeFastShareReq.prototype.getShareType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SOfficeFastShareReq} returns this
 */
proto.C2SOfficeFastShareReq.prototype.setShareType = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.S2COfficeFastShareAck.prototype.toObject = function(opt_includeInstance) {
  return proto.S2COfficeFastShareAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.S2COfficeFastShareAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2COfficeFastShareAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    errcode: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.S2COfficeFastShareAck}
 */
proto.S2COfficeFastShareAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.S2COfficeFastShareAck;
  return proto.S2COfficeFastShareAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.S2COfficeFastShareAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.S2COfficeFastShareAck}
 */
proto.S2COfficeFastShareAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.S2COfficeFastShareAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.S2COfficeFastShareAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.S2COfficeFastShareAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2COfficeFastShareAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrcode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 errCode = 1;
 * @return {number}
 */
proto.S2COfficeFastShareAck.prototype.getErrcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2COfficeFastShareAck} returns this
 */
proto.S2COfficeFastShareAck.prototype.setErrcode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.C2SOfficeFastShareOperateReq.prototype.toObject = function(opt_includeInstance) {
  return proto.C2SOfficeFastShareOperateReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.C2SOfficeFastShareOperateReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SOfficeFastShareOperateReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    companyId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.C2SOfficeFastShareOperateReq}
 */
proto.C2SOfficeFastShareOperateReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.C2SOfficeFastShareOperateReq;
  return proto.C2SOfficeFastShareOperateReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.C2SOfficeFastShareOperateReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.C2SOfficeFastShareOperateReq}
 */
proto.C2SOfficeFastShareOperateReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCompanyId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.C2SOfficeFastShareOperateReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.C2SOfficeFastShareOperateReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.C2SOfficeFastShareOperateReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SOfficeFastShareOperateReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCompanyId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 company_id = 1;
 * @return {number}
 */
proto.C2SOfficeFastShareOperateReq.prototype.getCompanyId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SOfficeFastShareOperateReq} returns this
 */
proto.C2SOfficeFastShareOperateReq.prototype.setCompanyId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.S2COfficeFastShareOperateAck.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.S2COfficeFastShareOperateAck.prototype.toObject = function(opt_includeInstance) {
  return proto.S2COfficeFastShareOperateAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.S2COfficeFastShareOperateAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2COfficeFastShareOperateAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    errcode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    infosList: jspb.Message.toObjectList(msg.getInfosList(),
    proto.MsgOfficeWorkerInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.S2COfficeFastShareOperateAck}
 */
proto.S2COfficeFastShareOperateAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.S2COfficeFastShareOperateAck;
  return proto.S2COfficeFastShareOperateAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.S2COfficeFastShareOperateAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.S2COfficeFastShareOperateAck}
 */
proto.S2COfficeFastShareOperateAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrcode(value);
      break;
    case 2:
      var value = new proto.MsgOfficeWorkerInfo;
      reader.readMessage(value,proto.MsgOfficeWorkerInfo.deserializeBinaryFromReader);
      msg.addInfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.S2COfficeFastShareOperateAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.S2COfficeFastShareOperateAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.S2COfficeFastShareOperateAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2COfficeFastShareOperateAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrcode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.MsgOfficeWorkerInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 errCode = 1;
 * @return {number}
 */
proto.S2COfficeFastShareOperateAck.prototype.getErrcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2COfficeFastShareOperateAck} returns this
 */
proto.S2COfficeFastShareOperateAck.prototype.setErrcode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated MsgOfficeWorkerInfo infos = 2;
 * @return {!Array<!proto.MsgOfficeWorkerInfo>}
 */
proto.S2COfficeFastShareOperateAck.prototype.getInfosList = function() {
  return /** @type{!Array<!proto.MsgOfficeWorkerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MsgOfficeWorkerInfo, 2));
};


/**
 * @param {!Array<!proto.MsgOfficeWorkerInfo>} value
 * @return {!proto.S2COfficeFastShareOperateAck} returns this
*/
proto.S2COfficeFastShareOperateAck.prototype.setInfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.MsgOfficeWorkerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MsgOfficeWorkerInfo}
 */
proto.S2COfficeFastShareOperateAck.prototype.addInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.MsgOfficeWorkerInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.S2COfficeFastShareOperateAck} returns this
 */
proto.S2COfficeFastShareOperateAck.prototype.clearInfosList = function() {
  return this.setInfosList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.C2SOfficeMeetingCreateReq.prototype.toObject = function(opt_includeInstance) {
  return proto.C2SOfficeMeetingCreateReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.C2SOfficeMeetingCreateReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SOfficeMeetingCreateReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    companyId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.C2SOfficeMeetingCreateReq}
 */
proto.C2SOfficeMeetingCreateReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.C2SOfficeMeetingCreateReq;
  return proto.C2SOfficeMeetingCreateReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.C2SOfficeMeetingCreateReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.C2SOfficeMeetingCreateReq}
 */
proto.C2SOfficeMeetingCreateReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCompanyId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.C2SOfficeMeetingCreateReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.C2SOfficeMeetingCreateReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.C2SOfficeMeetingCreateReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SOfficeMeetingCreateReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCompanyId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 company_id = 1;
 * @return {number}
 */
proto.C2SOfficeMeetingCreateReq.prototype.getCompanyId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SOfficeMeetingCreateReq} returns this
 */
proto.C2SOfficeMeetingCreateReq.prototype.setCompanyId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.S2COfficeMeetingCreateAck.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.S2COfficeMeetingCreateAck.prototype.toObject = function(opt_includeInstance) {
  return proto.S2COfficeMeetingCreateAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.S2COfficeMeetingCreateAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2COfficeMeetingCreateAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    errcode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    infosList: jspb.Message.toObjectList(msg.getInfosList(),
    proto.MsgOfficeWorkerInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.S2COfficeMeetingCreateAck}
 */
proto.S2COfficeMeetingCreateAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.S2COfficeMeetingCreateAck;
  return proto.S2COfficeMeetingCreateAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.S2COfficeMeetingCreateAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.S2COfficeMeetingCreateAck}
 */
proto.S2COfficeMeetingCreateAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrcode(value);
      break;
    case 2:
      var value = new proto.MsgOfficeWorkerInfo;
      reader.readMessage(value,proto.MsgOfficeWorkerInfo.deserializeBinaryFromReader);
      msg.addInfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.S2COfficeMeetingCreateAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.S2COfficeMeetingCreateAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.S2COfficeMeetingCreateAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2COfficeMeetingCreateAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrcode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.MsgOfficeWorkerInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 errCode = 1;
 * @return {number}
 */
proto.S2COfficeMeetingCreateAck.prototype.getErrcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2COfficeMeetingCreateAck} returns this
 */
proto.S2COfficeMeetingCreateAck.prototype.setErrcode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated MsgOfficeWorkerInfo infos = 2;
 * @return {!Array<!proto.MsgOfficeWorkerInfo>}
 */
proto.S2COfficeMeetingCreateAck.prototype.getInfosList = function() {
  return /** @type{!Array<!proto.MsgOfficeWorkerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MsgOfficeWorkerInfo, 2));
};


/**
 * @param {!Array<!proto.MsgOfficeWorkerInfo>} value
 * @return {!proto.S2COfficeMeetingCreateAck} returns this
*/
proto.S2COfficeMeetingCreateAck.prototype.setInfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.MsgOfficeWorkerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MsgOfficeWorkerInfo}
 */
proto.S2COfficeMeetingCreateAck.prototype.addInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.MsgOfficeWorkerInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.S2COfficeMeetingCreateAck} returns this
 */
proto.S2COfficeMeetingCreateAck.prototype.clearInfosList = function() {
  return this.setInfosList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.C2SOfficeMeetingJoinReq.prototype.toObject = function(opt_includeInstance) {
  return proto.C2SOfficeMeetingJoinReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.C2SOfficeMeetingJoinReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SOfficeMeetingJoinReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    companyId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.C2SOfficeMeetingJoinReq}
 */
proto.C2SOfficeMeetingJoinReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.C2SOfficeMeetingJoinReq;
  return proto.C2SOfficeMeetingJoinReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.C2SOfficeMeetingJoinReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.C2SOfficeMeetingJoinReq}
 */
proto.C2SOfficeMeetingJoinReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCompanyId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.C2SOfficeMeetingJoinReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.C2SOfficeMeetingJoinReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.C2SOfficeMeetingJoinReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SOfficeMeetingJoinReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCompanyId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 company_id = 1;
 * @return {number}
 */
proto.C2SOfficeMeetingJoinReq.prototype.getCompanyId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SOfficeMeetingJoinReq} returns this
 */
proto.C2SOfficeMeetingJoinReq.prototype.setCompanyId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.S2COfficeMeetingJoinAck.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.S2COfficeMeetingJoinAck.prototype.toObject = function(opt_includeInstance) {
  return proto.S2COfficeMeetingJoinAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.S2COfficeMeetingJoinAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2COfficeMeetingJoinAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    errcode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    infosList: jspb.Message.toObjectList(msg.getInfosList(),
    proto.MsgOfficeWorkerInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.S2COfficeMeetingJoinAck}
 */
proto.S2COfficeMeetingJoinAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.S2COfficeMeetingJoinAck;
  return proto.S2COfficeMeetingJoinAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.S2COfficeMeetingJoinAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.S2COfficeMeetingJoinAck}
 */
proto.S2COfficeMeetingJoinAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrcode(value);
      break;
    case 2:
      var value = new proto.MsgOfficeWorkerInfo;
      reader.readMessage(value,proto.MsgOfficeWorkerInfo.deserializeBinaryFromReader);
      msg.addInfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.S2COfficeMeetingJoinAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.S2COfficeMeetingJoinAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.S2COfficeMeetingJoinAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2COfficeMeetingJoinAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrcode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.MsgOfficeWorkerInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 errCode = 1;
 * @return {number}
 */
proto.S2COfficeMeetingJoinAck.prototype.getErrcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2COfficeMeetingJoinAck} returns this
 */
proto.S2COfficeMeetingJoinAck.prototype.setErrcode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated MsgOfficeWorkerInfo infos = 2;
 * @return {!Array<!proto.MsgOfficeWorkerInfo>}
 */
proto.S2COfficeMeetingJoinAck.prototype.getInfosList = function() {
  return /** @type{!Array<!proto.MsgOfficeWorkerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MsgOfficeWorkerInfo, 2));
};


/**
 * @param {!Array<!proto.MsgOfficeWorkerInfo>} value
 * @return {!proto.S2COfficeMeetingJoinAck} returns this
*/
proto.S2COfficeMeetingJoinAck.prototype.setInfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.MsgOfficeWorkerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MsgOfficeWorkerInfo}
 */
proto.S2COfficeMeetingJoinAck.prototype.addInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.MsgOfficeWorkerInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.S2COfficeMeetingJoinAck} returns this
 */
proto.S2COfficeMeetingJoinAck.prototype.clearInfosList = function() {
  return this.setInfosList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.C2SOfficeMeetingListReq.prototype.toObject = function(opt_includeInstance) {
  return proto.C2SOfficeMeetingListReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.C2SOfficeMeetingListReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SOfficeMeetingListReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    companyId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.C2SOfficeMeetingListReq}
 */
proto.C2SOfficeMeetingListReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.C2SOfficeMeetingListReq;
  return proto.C2SOfficeMeetingListReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.C2SOfficeMeetingListReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.C2SOfficeMeetingListReq}
 */
proto.C2SOfficeMeetingListReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCompanyId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.C2SOfficeMeetingListReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.C2SOfficeMeetingListReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.C2SOfficeMeetingListReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SOfficeMeetingListReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCompanyId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 company_id = 1;
 * @return {number}
 */
proto.C2SOfficeMeetingListReq.prototype.getCompanyId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SOfficeMeetingListReq} returns this
 */
proto.C2SOfficeMeetingListReq.prototype.setCompanyId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.S2COfficeMeetingListAck.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.S2COfficeMeetingListAck.prototype.toObject = function(opt_includeInstance) {
  return proto.S2COfficeMeetingListAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.S2COfficeMeetingListAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2COfficeMeetingListAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    errcode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    infosList: jspb.Message.toObjectList(msg.getInfosList(),
    proto.MsgOfficeWorkerInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.S2COfficeMeetingListAck}
 */
proto.S2COfficeMeetingListAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.S2COfficeMeetingListAck;
  return proto.S2COfficeMeetingListAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.S2COfficeMeetingListAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.S2COfficeMeetingListAck}
 */
proto.S2COfficeMeetingListAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrcode(value);
      break;
    case 2:
      var value = new proto.MsgOfficeWorkerInfo;
      reader.readMessage(value,proto.MsgOfficeWorkerInfo.deserializeBinaryFromReader);
      msg.addInfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.S2COfficeMeetingListAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.S2COfficeMeetingListAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.S2COfficeMeetingListAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2COfficeMeetingListAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrcode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.MsgOfficeWorkerInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 errCode = 1;
 * @return {number}
 */
proto.S2COfficeMeetingListAck.prototype.getErrcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2COfficeMeetingListAck} returns this
 */
proto.S2COfficeMeetingListAck.prototype.setErrcode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated MsgOfficeWorkerInfo infos = 2;
 * @return {!Array<!proto.MsgOfficeWorkerInfo>}
 */
proto.S2COfficeMeetingListAck.prototype.getInfosList = function() {
  return /** @type{!Array<!proto.MsgOfficeWorkerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MsgOfficeWorkerInfo, 2));
};


/**
 * @param {!Array<!proto.MsgOfficeWorkerInfo>} value
 * @return {!proto.S2COfficeMeetingListAck} returns this
*/
proto.S2COfficeMeetingListAck.prototype.setInfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.MsgOfficeWorkerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MsgOfficeWorkerInfo}
 */
proto.S2COfficeMeetingListAck.prototype.addInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.MsgOfficeWorkerInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.S2COfficeMeetingListAck} returns this
 */
proto.S2COfficeMeetingListAck.prototype.clearInfosList = function() {
  return this.setInfosList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.C2SOfficeMeetingClearReq.prototype.toObject = function(opt_includeInstance) {
  return proto.C2SOfficeMeetingClearReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.C2SOfficeMeetingClearReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SOfficeMeetingClearReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    companyId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.C2SOfficeMeetingClearReq}
 */
proto.C2SOfficeMeetingClearReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.C2SOfficeMeetingClearReq;
  return proto.C2SOfficeMeetingClearReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.C2SOfficeMeetingClearReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.C2SOfficeMeetingClearReq}
 */
proto.C2SOfficeMeetingClearReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCompanyId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.C2SOfficeMeetingClearReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.C2SOfficeMeetingClearReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.C2SOfficeMeetingClearReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SOfficeMeetingClearReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCompanyId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 company_id = 1;
 * @return {number}
 */
proto.C2SOfficeMeetingClearReq.prototype.getCompanyId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SOfficeMeetingClearReq} returns this
 */
proto.C2SOfficeMeetingClearReq.prototype.setCompanyId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.S2COfficeMeetingClearAck.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.S2COfficeMeetingClearAck.prototype.toObject = function(opt_includeInstance) {
  return proto.S2COfficeMeetingClearAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.S2COfficeMeetingClearAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2COfficeMeetingClearAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    errcode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    infosList: jspb.Message.toObjectList(msg.getInfosList(),
    proto.MsgOfficeWorkerInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.S2COfficeMeetingClearAck}
 */
proto.S2COfficeMeetingClearAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.S2COfficeMeetingClearAck;
  return proto.S2COfficeMeetingClearAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.S2COfficeMeetingClearAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.S2COfficeMeetingClearAck}
 */
proto.S2COfficeMeetingClearAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrcode(value);
      break;
    case 2:
      var value = new proto.MsgOfficeWorkerInfo;
      reader.readMessage(value,proto.MsgOfficeWorkerInfo.deserializeBinaryFromReader);
      msg.addInfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.S2COfficeMeetingClearAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.S2COfficeMeetingClearAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.S2COfficeMeetingClearAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2COfficeMeetingClearAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrcode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.MsgOfficeWorkerInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 errCode = 1;
 * @return {number}
 */
proto.S2COfficeMeetingClearAck.prototype.getErrcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2COfficeMeetingClearAck} returns this
 */
proto.S2COfficeMeetingClearAck.prototype.setErrcode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated MsgOfficeWorkerInfo infos = 2;
 * @return {!Array<!proto.MsgOfficeWorkerInfo>}
 */
proto.S2COfficeMeetingClearAck.prototype.getInfosList = function() {
  return /** @type{!Array<!proto.MsgOfficeWorkerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MsgOfficeWorkerInfo, 2));
};


/**
 * @param {!Array<!proto.MsgOfficeWorkerInfo>} value
 * @return {!proto.S2COfficeMeetingClearAck} returns this
*/
proto.S2COfficeMeetingClearAck.prototype.setInfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.MsgOfficeWorkerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MsgOfficeWorkerInfo}
 */
proto.S2COfficeMeetingClearAck.prototype.addInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.MsgOfficeWorkerInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.S2COfficeMeetingClearAck} returns this
 */
proto.S2COfficeMeetingClearAck.prototype.clearInfosList = function() {
  return this.setInfosList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.C2SOfficeMeetingCameraStateReq.prototype.toObject = function(opt_includeInstance) {
  return proto.C2SOfficeMeetingCameraStateReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.C2SOfficeMeetingCameraStateReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SOfficeMeetingCameraStateReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    sceneid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    scenekey: jspb.Message.getFieldWithDefault(msg, 2, 0),
    opt: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.C2SOfficeMeetingCameraStateReq}
 */
proto.C2SOfficeMeetingCameraStateReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.C2SOfficeMeetingCameraStateReq;
  return proto.C2SOfficeMeetingCameraStateReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.C2SOfficeMeetingCameraStateReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.C2SOfficeMeetingCameraStateReq}
 */
proto.C2SOfficeMeetingCameraStateReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSceneid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScenekey(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOpt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.C2SOfficeMeetingCameraStateReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.C2SOfficeMeetingCameraStateReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.C2SOfficeMeetingCameraStateReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SOfficeMeetingCameraStateReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSceneid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getScenekey();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getOpt();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 sceneId = 1;
 * @return {number}
 */
proto.C2SOfficeMeetingCameraStateReq.prototype.getSceneid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SOfficeMeetingCameraStateReq} returns this
 */
proto.C2SOfficeMeetingCameraStateReq.prototype.setSceneid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 sceneKey = 2;
 * @return {number}
 */
proto.C2SOfficeMeetingCameraStateReq.prototype.getScenekey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SOfficeMeetingCameraStateReq} returns this
 */
proto.C2SOfficeMeetingCameraStateReq.prototype.setScenekey = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 opt = 3;
 * @return {number}
 */
proto.C2SOfficeMeetingCameraStateReq.prototype.getOpt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SOfficeMeetingCameraStateReq} returns this
 */
proto.C2SOfficeMeetingCameraStateReq.prototype.setOpt = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.S2COfficeMeetingCameraStateAck.prototype.toObject = function(opt_includeInstance) {
  return proto.S2COfficeMeetingCameraStateAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.S2COfficeMeetingCameraStateAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2COfficeMeetingCameraStateAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    errcode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roleid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    opt: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.S2COfficeMeetingCameraStateAck}
 */
proto.S2COfficeMeetingCameraStateAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.S2COfficeMeetingCameraStateAck;
  return proto.S2COfficeMeetingCameraStateAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.S2COfficeMeetingCameraStateAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.S2COfficeMeetingCameraStateAck}
 */
proto.S2COfficeMeetingCameraStateAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrcode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoleid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOpt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.S2COfficeMeetingCameraStateAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.S2COfficeMeetingCameraStateAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.S2COfficeMeetingCameraStateAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2COfficeMeetingCameraStateAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrcode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRoleid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getOpt();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 errCode = 1;
 * @return {number}
 */
proto.S2COfficeMeetingCameraStateAck.prototype.getErrcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2COfficeMeetingCameraStateAck} returns this
 */
proto.S2COfficeMeetingCameraStateAck.prototype.setErrcode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 roleId = 2;
 * @return {number}
 */
proto.S2COfficeMeetingCameraStateAck.prototype.getRoleid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2COfficeMeetingCameraStateAck} returns this
 */
proto.S2COfficeMeetingCameraStateAck.prototype.setRoleid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 opt = 3;
 * @return {number}
 */
proto.S2COfficeMeetingCameraStateAck.prototype.getOpt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2COfficeMeetingCameraStateAck} returns this
 */
proto.S2COfficeMeetingCameraStateAck.prototype.setOpt = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.C2SOfficeMeetingVoiceStateReq.prototype.toObject = function(opt_includeInstance) {
  return proto.C2SOfficeMeetingVoiceStateReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.C2SOfficeMeetingVoiceStateReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SOfficeMeetingVoiceStateReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    sceneid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    scenekey: jspb.Message.getFieldWithDefault(msg, 2, 0),
    opt: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.C2SOfficeMeetingVoiceStateReq}
 */
proto.C2SOfficeMeetingVoiceStateReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.C2SOfficeMeetingVoiceStateReq;
  return proto.C2SOfficeMeetingVoiceStateReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.C2SOfficeMeetingVoiceStateReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.C2SOfficeMeetingVoiceStateReq}
 */
proto.C2SOfficeMeetingVoiceStateReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSceneid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScenekey(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOpt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.C2SOfficeMeetingVoiceStateReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.C2SOfficeMeetingVoiceStateReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.C2SOfficeMeetingVoiceStateReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SOfficeMeetingVoiceStateReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSceneid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getScenekey();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getOpt();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 sceneId = 1;
 * @return {number}
 */
proto.C2SOfficeMeetingVoiceStateReq.prototype.getSceneid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SOfficeMeetingVoiceStateReq} returns this
 */
proto.C2SOfficeMeetingVoiceStateReq.prototype.setSceneid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 sceneKey = 2;
 * @return {number}
 */
proto.C2SOfficeMeetingVoiceStateReq.prototype.getScenekey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SOfficeMeetingVoiceStateReq} returns this
 */
proto.C2SOfficeMeetingVoiceStateReq.prototype.setScenekey = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 opt = 3;
 * @return {number}
 */
proto.C2SOfficeMeetingVoiceStateReq.prototype.getOpt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SOfficeMeetingVoiceStateReq} returns this
 */
proto.C2SOfficeMeetingVoiceStateReq.prototype.setOpt = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.S2COfficeMeetingVoiceStateAck.prototype.toObject = function(opt_includeInstance) {
  return proto.S2COfficeMeetingVoiceStateAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.S2COfficeMeetingVoiceStateAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2COfficeMeetingVoiceStateAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    errcode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roleid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    opt: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.S2COfficeMeetingVoiceStateAck}
 */
proto.S2COfficeMeetingVoiceStateAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.S2COfficeMeetingVoiceStateAck;
  return proto.S2COfficeMeetingVoiceStateAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.S2COfficeMeetingVoiceStateAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.S2COfficeMeetingVoiceStateAck}
 */
proto.S2COfficeMeetingVoiceStateAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrcode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoleid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOpt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.S2COfficeMeetingVoiceStateAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.S2COfficeMeetingVoiceStateAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.S2COfficeMeetingVoiceStateAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2COfficeMeetingVoiceStateAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrcode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRoleid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getOpt();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 errCode = 1;
 * @return {number}
 */
proto.S2COfficeMeetingVoiceStateAck.prototype.getErrcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2COfficeMeetingVoiceStateAck} returns this
 */
proto.S2COfficeMeetingVoiceStateAck.prototype.setErrcode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 roleId = 2;
 * @return {number}
 */
proto.S2COfficeMeetingVoiceStateAck.prototype.getRoleid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2COfficeMeetingVoiceStateAck} returns this
 */
proto.S2COfficeMeetingVoiceStateAck.prototype.setRoleid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 opt = 3;
 * @return {number}
 */
proto.S2COfficeMeetingVoiceStateAck.prototype.getOpt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2COfficeMeetingVoiceStateAck} returns this
 */
proto.S2COfficeMeetingVoiceStateAck.prototype.setOpt = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.C2SOfficeMeetingWorkerRomoveReq.prototype.toObject = function(opt_includeInstance) {
  return proto.C2SOfficeMeetingWorkerRomoveReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.C2SOfficeMeetingWorkerRomoveReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SOfficeMeetingWorkerRomoveReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    companyId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.C2SOfficeMeetingWorkerRomoveReq}
 */
proto.C2SOfficeMeetingWorkerRomoveReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.C2SOfficeMeetingWorkerRomoveReq;
  return proto.C2SOfficeMeetingWorkerRomoveReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.C2SOfficeMeetingWorkerRomoveReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.C2SOfficeMeetingWorkerRomoveReq}
 */
proto.C2SOfficeMeetingWorkerRomoveReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCompanyId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.C2SOfficeMeetingWorkerRomoveReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.C2SOfficeMeetingWorkerRomoveReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.C2SOfficeMeetingWorkerRomoveReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SOfficeMeetingWorkerRomoveReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCompanyId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 company_id = 1;
 * @return {number}
 */
proto.C2SOfficeMeetingWorkerRomoveReq.prototype.getCompanyId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SOfficeMeetingWorkerRomoveReq} returns this
 */
proto.C2SOfficeMeetingWorkerRomoveReq.prototype.setCompanyId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.S2COfficeMeetingWorkerRomoveAck.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.S2COfficeMeetingWorkerRomoveAck.prototype.toObject = function(opt_includeInstance) {
  return proto.S2COfficeMeetingWorkerRomoveAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.S2COfficeMeetingWorkerRomoveAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2COfficeMeetingWorkerRomoveAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    errcode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    infosList: jspb.Message.toObjectList(msg.getInfosList(),
    proto.MsgOfficeWorkerInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.S2COfficeMeetingWorkerRomoveAck}
 */
proto.S2COfficeMeetingWorkerRomoveAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.S2COfficeMeetingWorkerRomoveAck;
  return proto.S2COfficeMeetingWorkerRomoveAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.S2COfficeMeetingWorkerRomoveAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.S2COfficeMeetingWorkerRomoveAck}
 */
proto.S2COfficeMeetingWorkerRomoveAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrcode(value);
      break;
    case 2:
      var value = new proto.MsgOfficeWorkerInfo;
      reader.readMessage(value,proto.MsgOfficeWorkerInfo.deserializeBinaryFromReader);
      msg.addInfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.S2COfficeMeetingWorkerRomoveAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.S2COfficeMeetingWorkerRomoveAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.S2COfficeMeetingWorkerRomoveAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2COfficeMeetingWorkerRomoveAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrcode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.MsgOfficeWorkerInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 errCode = 1;
 * @return {number}
 */
proto.S2COfficeMeetingWorkerRomoveAck.prototype.getErrcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2COfficeMeetingWorkerRomoveAck} returns this
 */
proto.S2COfficeMeetingWorkerRomoveAck.prototype.setErrcode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated MsgOfficeWorkerInfo infos = 2;
 * @return {!Array<!proto.MsgOfficeWorkerInfo>}
 */
proto.S2COfficeMeetingWorkerRomoveAck.prototype.getInfosList = function() {
  return /** @type{!Array<!proto.MsgOfficeWorkerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MsgOfficeWorkerInfo, 2));
};


/**
 * @param {!Array<!proto.MsgOfficeWorkerInfo>} value
 * @return {!proto.S2COfficeMeetingWorkerRomoveAck} returns this
*/
proto.S2COfficeMeetingWorkerRomoveAck.prototype.setInfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.MsgOfficeWorkerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MsgOfficeWorkerInfo}
 */
proto.S2COfficeMeetingWorkerRomoveAck.prototype.addInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.MsgOfficeWorkerInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.S2COfficeMeetingWorkerRomoveAck} returns this
 */
proto.S2COfficeMeetingWorkerRomoveAck.prototype.clearInfosList = function() {
  return this.setInfosList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.C2SOfficeMeetingWorkerInviteReq.prototype.toObject = function(opt_includeInstance) {
  return proto.C2SOfficeMeetingWorkerInviteReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.C2SOfficeMeetingWorkerInviteReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SOfficeMeetingWorkerInviteReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    companyId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.C2SOfficeMeetingWorkerInviteReq}
 */
proto.C2SOfficeMeetingWorkerInviteReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.C2SOfficeMeetingWorkerInviteReq;
  return proto.C2SOfficeMeetingWorkerInviteReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.C2SOfficeMeetingWorkerInviteReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.C2SOfficeMeetingWorkerInviteReq}
 */
proto.C2SOfficeMeetingWorkerInviteReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCompanyId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.C2SOfficeMeetingWorkerInviteReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.C2SOfficeMeetingWorkerInviteReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.C2SOfficeMeetingWorkerInviteReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SOfficeMeetingWorkerInviteReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCompanyId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 company_id = 1;
 * @return {number}
 */
proto.C2SOfficeMeetingWorkerInviteReq.prototype.getCompanyId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SOfficeMeetingWorkerInviteReq} returns this
 */
proto.C2SOfficeMeetingWorkerInviteReq.prototype.setCompanyId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.S2COfficeMeetingWorkerInviteAck.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.S2COfficeMeetingWorkerInviteAck.prototype.toObject = function(opt_includeInstance) {
  return proto.S2COfficeMeetingWorkerInviteAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.S2COfficeMeetingWorkerInviteAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2COfficeMeetingWorkerInviteAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    errcode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    infosList: jspb.Message.toObjectList(msg.getInfosList(),
    proto.MsgOfficeWorkerInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.S2COfficeMeetingWorkerInviteAck}
 */
proto.S2COfficeMeetingWorkerInviteAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.S2COfficeMeetingWorkerInviteAck;
  return proto.S2COfficeMeetingWorkerInviteAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.S2COfficeMeetingWorkerInviteAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.S2COfficeMeetingWorkerInviteAck}
 */
proto.S2COfficeMeetingWorkerInviteAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrcode(value);
      break;
    case 2:
      var value = new proto.MsgOfficeWorkerInfo;
      reader.readMessage(value,proto.MsgOfficeWorkerInfo.deserializeBinaryFromReader);
      msg.addInfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.S2COfficeMeetingWorkerInviteAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.S2COfficeMeetingWorkerInviteAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.S2COfficeMeetingWorkerInviteAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2COfficeMeetingWorkerInviteAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrcode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.MsgOfficeWorkerInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 errCode = 1;
 * @return {number}
 */
proto.S2COfficeMeetingWorkerInviteAck.prototype.getErrcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2COfficeMeetingWorkerInviteAck} returns this
 */
proto.S2COfficeMeetingWorkerInviteAck.prototype.setErrcode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated MsgOfficeWorkerInfo infos = 2;
 * @return {!Array<!proto.MsgOfficeWorkerInfo>}
 */
proto.S2COfficeMeetingWorkerInviteAck.prototype.getInfosList = function() {
  return /** @type{!Array<!proto.MsgOfficeWorkerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MsgOfficeWorkerInfo, 2));
};


/**
 * @param {!Array<!proto.MsgOfficeWorkerInfo>} value
 * @return {!proto.S2COfficeMeetingWorkerInviteAck} returns this
*/
proto.S2COfficeMeetingWorkerInviteAck.prototype.setInfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.MsgOfficeWorkerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MsgOfficeWorkerInfo}
 */
proto.S2COfficeMeetingWorkerInviteAck.prototype.addInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.MsgOfficeWorkerInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.S2COfficeMeetingWorkerInviteAck} returns this
 */
proto.S2COfficeMeetingWorkerInviteAck.prototype.clearInfosList = function() {
  return this.setInfosList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.C2SOfficeMeetingWorkerQuitReq.prototype.toObject = function(opt_includeInstance) {
  return proto.C2SOfficeMeetingWorkerQuitReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.C2SOfficeMeetingWorkerQuitReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SOfficeMeetingWorkerQuitReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    companyId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.C2SOfficeMeetingWorkerQuitReq}
 */
proto.C2SOfficeMeetingWorkerQuitReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.C2SOfficeMeetingWorkerQuitReq;
  return proto.C2SOfficeMeetingWorkerQuitReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.C2SOfficeMeetingWorkerQuitReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.C2SOfficeMeetingWorkerQuitReq}
 */
proto.C2SOfficeMeetingWorkerQuitReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCompanyId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.C2SOfficeMeetingWorkerQuitReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.C2SOfficeMeetingWorkerQuitReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.C2SOfficeMeetingWorkerQuitReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SOfficeMeetingWorkerQuitReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCompanyId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 company_id = 1;
 * @return {number}
 */
proto.C2SOfficeMeetingWorkerQuitReq.prototype.getCompanyId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SOfficeMeetingWorkerQuitReq} returns this
 */
proto.C2SOfficeMeetingWorkerQuitReq.prototype.setCompanyId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.S2COfficeMeetingWorkerQuitAck.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.S2COfficeMeetingWorkerQuitAck.prototype.toObject = function(opt_includeInstance) {
  return proto.S2COfficeMeetingWorkerQuitAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.S2COfficeMeetingWorkerQuitAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2COfficeMeetingWorkerQuitAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    errcode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    infosList: jspb.Message.toObjectList(msg.getInfosList(),
    proto.MsgOfficeWorkerInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.S2COfficeMeetingWorkerQuitAck}
 */
proto.S2COfficeMeetingWorkerQuitAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.S2COfficeMeetingWorkerQuitAck;
  return proto.S2COfficeMeetingWorkerQuitAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.S2COfficeMeetingWorkerQuitAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.S2COfficeMeetingWorkerQuitAck}
 */
proto.S2COfficeMeetingWorkerQuitAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrcode(value);
      break;
    case 2:
      var value = new proto.MsgOfficeWorkerInfo;
      reader.readMessage(value,proto.MsgOfficeWorkerInfo.deserializeBinaryFromReader);
      msg.addInfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.S2COfficeMeetingWorkerQuitAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.S2COfficeMeetingWorkerQuitAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.S2COfficeMeetingWorkerQuitAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2COfficeMeetingWorkerQuitAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrcode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.MsgOfficeWorkerInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 errCode = 1;
 * @return {number}
 */
proto.S2COfficeMeetingWorkerQuitAck.prototype.getErrcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2COfficeMeetingWorkerQuitAck} returns this
 */
proto.S2COfficeMeetingWorkerQuitAck.prototype.setErrcode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated MsgOfficeWorkerInfo infos = 2;
 * @return {!Array<!proto.MsgOfficeWorkerInfo>}
 */
proto.S2COfficeMeetingWorkerQuitAck.prototype.getInfosList = function() {
  return /** @type{!Array<!proto.MsgOfficeWorkerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MsgOfficeWorkerInfo, 2));
};


/**
 * @param {!Array<!proto.MsgOfficeWorkerInfo>} value
 * @return {!proto.S2COfficeMeetingWorkerQuitAck} returns this
*/
proto.S2COfficeMeetingWorkerQuitAck.prototype.setInfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.MsgOfficeWorkerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MsgOfficeWorkerInfo}
 */
proto.S2COfficeMeetingWorkerQuitAck.prototype.addInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.MsgOfficeWorkerInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.S2COfficeMeetingWorkerQuitAck} returns this
 */
proto.S2COfficeMeetingWorkerQuitAck.prototype.clearInfosList = function() {
  return this.setInfosList([]);
};


//goog.object.extend(exports, proto);//前
export default proto;//后
