// source: chat.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

// var jspb = require('google-protobuf');
import * as jspb from 'google-protobuf';//Âêé
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.C2SChatHistoryReq', null, global);
goog.exportSymbol('proto.C2SSocializeChatReq', null, global);
goog.exportSymbol('proto.ChatContent', null, global);
goog.exportSymbol('proto.ChatHistoryItem', null, global);
goog.exportSymbol('proto.LoadChatHistoryOver', null, global);
goog.exportSymbol('proto.MsgSocializeRoleUnit', null, global);
goog.exportSymbol('proto.S2CChatHistoryACK', null, global);
goog.exportSymbol('proto.S2CSocializeChatAck', null, global);
goog.exportSymbol('proto.S2CSystemNotice', null, global);
goog.exportSymbol('proto.SOCIALIZECHATCHANNELTYPE', null, global);
goog.exportSymbol('proto.SOCIALIZECHATTYPE', null, global);
goog.exportSymbol('proto.SystemNoticeType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.S2CSystemNotice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.S2CSystemNotice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.S2CSystemNotice.displayName = 'proto.S2CSystemNotice';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.C2SSocializeChatReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.C2SSocializeChatReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.C2SSocializeChatReq.displayName = 'proto.C2SSocializeChatReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.S2CSocializeChatAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.S2CSocializeChatAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.S2CSocializeChatAck.displayName = 'proto.S2CSocializeChatAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgSocializeRoleUnit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgSocializeRoleUnit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MsgSocializeRoleUnit.displayName = 'proto.MsgSocializeRoleUnit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.C2SChatHistoryReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.C2SChatHistoryReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.C2SChatHistoryReq.displayName = 'proto.C2SChatHistoryReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChatContent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChatContent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ChatContent.displayName = 'proto.ChatContent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChatHistoryItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChatHistoryItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ChatHistoryItem.displayName = 'proto.ChatHistoryItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.S2CChatHistoryACK = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.S2CChatHistoryACK.repeatedFields_, null);
};
goog.inherits(proto.S2CChatHistoryACK, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.S2CChatHistoryACK.displayName = 'proto.S2CChatHistoryACK';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LoadChatHistoryOver = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LoadChatHistoryOver, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.LoadChatHistoryOver.displayName = 'proto.LoadChatHistoryOver';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.S2CSystemNotice.prototype.toObject = function(opt_includeInstance) {
  return proto.S2CSystemNotice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.S2CSystemNotice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2CSystemNotice.toObject = function(includeInstance, msg) {
  var f, obj = {
    noticetype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    content: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.S2CSystemNotice}
 */
proto.S2CSystemNotice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.S2CSystemNotice;
  return proto.S2CSystemNotice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.S2CSystemNotice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.S2CSystemNotice}
 */
proto.S2CSystemNotice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNoticetype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.S2CSystemNotice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.S2CSystemNotice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.S2CSystemNotice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2CSystemNotice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNoticetype();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 noticeType = 1;
 * @return {number}
 */
proto.S2CSystemNotice.prototype.getNoticetype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2CSystemNotice} returns this
 */
proto.S2CSystemNotice.prototype.setNoticetype = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string content = 2;
 * @return {string}
 */
proto.S2CSystemNotice.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.S2CSystemNotice} returns this
 */
proto.S2CSystemNotice.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.C2SSocializeChatReq.prototype.toObject = function(opt_includeInstance) {
  return proto.C2SSocializeChatReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.C2SSocializeChatReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SSocializeChatReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    channeltype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    groupid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    targetroleid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    text: jspb.Message.getFieldWithDefault(msg, 4, ""),
    voiceid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    voiceduration: jspb.Message.getFieldWithDefault(msg, 6, 0),
    chatType: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.C2SSocializeChatReq}
 */
proto.C2SSocializeChatReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.C2SSocializeChatReq;
  return proto.C2SSocializeChatReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.C2SSocializeChatReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.C2SSocializeChatReq}
 */
proto.C2SSocializeChatReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChanneltype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGroupid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTargetroleid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setVoiceid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVoiceduration(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChatType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.C2SSocializeChatReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.C2SSocializeChatReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.C2SSocializeChatReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SSocializeChatReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChanneltype();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getGroupid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getTargetroleid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getVoiceid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getVoiceduration();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getChatType();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * optional int32 channelType = 1;
 * @return {number}
 */
proto.C2SSocializeChatReq.prototype.getChanneltype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SSocializeChatReq} returns this
 */
proto.C2SSocializeChatReq.prototype.setChanneltype = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 groupId = 2;
 * @return {number}
 */
proto.C2SSocializeChatReq.prototype.getGroupid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SSocializeChatReq} returns this
 */
proto.C2SSocializeChatReq.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 targetRoleId = 3;
 * @return {number}
 */
proto.C2SSocializeChatReq.prototype.getTargetroleid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SSocializeChatReq} returns this
 */
proto.C2SSocializeChatReq.prototype.setTargetroleid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string text = 4;
 * @return {string}
 */
proto.C2SSocializeChatReq.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.C2SSocializeChatReq} returns this
 */
proto.C2SSocializeChatReq.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string voiceId = 5;
 * @return {string}
 */
proto.C2SSocializeChatReq.prototype.getVoiceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.C2SSocializeChatReq} returns this
 */
proto.C2SSocializeChatReq.prototype.setVoiceid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 voiceDuration = 6;
 * @return {number}
 */
proto.C2SSocializeChatReq.prototype.getVoiceduration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SSocializeChatReq} returns this
 */
proto.C2SSocializeChatReq.prototype.setVoiceduration = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 chat_type = 7;
 * @return {number}
 */
proto.C2SSocializeChatReq.prototype.getChatType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2SSocializeChatReq} returns this
 */
proto.C2SSocializeChatReq.prototype.setChatType = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.S2CSocializeChatAck.prototype.toObject = function(opt_includeInstance) {
  return proto.S2CSocializeChatAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.S2CSocializeChatAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2CSocializeChatAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    errcode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    channeltype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    groupid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    fromrole: (f = msg.getFromrole()) && proto.MsgSocializeRoleUnit.toObject(includeInstance, f),
    targetrole: (f = msg.getTargetrole()) && proto.MsgSocializeRoleUnit.toObject(includeInstance, f),
    sendtime: jspb.Message.getFieldWithDefault(msg, 6, 0),
    text: jspb.Message.getFieldWithDefault(msg, 7, ""),
    voiceid: jspb.Message.getFieldWithDefault(msg, 8, ""),
    voiceduration: jspb.Message.getFieldWithDefault(msg, 9, 0),
    chatType: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.S2CSocializeChatAck}
 */
proto.S2CSocializeChatAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.S2CSocializeChatAck;
  return proto.S2CSocializeChatAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.S2CSocializeChatAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.S2CSocializeChatAck}
 */
proto.S2CSocializeChatAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrcode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChanneltype(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGroupid(value);
      break;
    case 4:
      var value = new proto.MsgSocializeRoleUnit;
      reader.readMessage(value,proto.MsgSocializeRoleUnit.deserializeBinaryFromReader);
      msg.setFromrole(value);
      break;
    case 5:
      var value = new proto.MsgSocializeRoleUnit;
      reader.readMessage(value,proto.MsgSocializeRoleUnit.deserializeBinaryFromReader);
      msg.setTargetrole(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSendtime(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setVoiceid(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVoiceduration(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChatType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.S2CSocializeChatAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.S2CSocializeChatAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.S2CSocializeChatAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2CSocializeChatAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrcode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getChanneltype();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getGroupid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getFromrole();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.MsgSocializeRoleUnit.serializeBinaryToWriter
    );
  }
  f = message.getTargetrole();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.MsgSocializeRoleUnit.serializeBinaryToWriter
    );
  }
  f = message.getSendtime();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getVoiceid();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getVoiceduration();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getChatType();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
};


/**
 * optional int32 errCode = 1;
 * @return {number}
 */
proto.S2CSocializeChatAck.prototype.getErrcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2CSocializeChatAck} returns this
 */
proto.S2CSocializeChatAck.prototype.setErrcode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 channelType = 2;
 * @return {number}
 */
proto.S2CSocializeChatAck.prototype.getChanneltype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2CSocializeChatAck} returns this
 */
proto.S2CSocializeChatAck.prototype.setChanneltype = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 groupId = 3;
 * @return {number}
 */
proto.S2CSocializeChatAck.prototype.getGroupid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2CSocializeChatAck} returns this
 */
proto.S2CSocializeChatAck.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional MsgSocializeRoleUnit fromRole = 4;
 * @return {?proto.MsgSocializeRoleUnit}
 */
proto.S2CSocializeChatAck.prototype.getFromrole = function() {
  return /** @type{?proto.MsgSocializeRoleUnit} */ (
    jspb.Message.getWrapperField(this, proto.MsgSocializeRoleUnit, 4));
};


/**
 * @param {?proto.MsgSocializeRoleUnit|undefined} value
 * @return {!proto.S2CSocializeChatAck} returns this
*/
proto.S2CSocializeChatAck.prototype.setFromrole = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.S2CSocializeChatAck} returns this
 */
proto.S2CSocializeChatAck.prototype.clearFromrole = function() {
  return this.setFromrole(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.S2CSocializeChatAck.prototype.hasFromrole = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional MsgSocializeRoleUnit targetRole = 5;
 * @return {?proto.MsgSocializeRoleUnit}
 */
proto.S2CSocializeChatAck.prototype.getTargetrole = function() {
  return /** @type{?proto.MsgSocializeRoleUnit} */ (
    jspb.Message.getWrapperField(this, proto.MsgSocializeRoleUnit, 5));
};


/**
 * @param {?proto.MsgSocializeRoleUnit|undefined} value
 * @return {!proto.S2CSocializeChatAck} returns this
*/
proto.S2CSocializeChatAck.prototype.setTargetrole = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.S2CSocializeChatAck} returns this
 */
proto.S2CSocializeChatAck.prototype.clearTargetrole = function() {
  return this.setTargetrole(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.S2CSocializeChatAck.prototype.hasTargetrole = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int64 sendTime = 6;
 * @return {number}
 */
proto.S2CSocializeChatAck.prototype.getSendtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2CSocializeChatAck} returns this
 */
proto.S2CSocializeChatAck.prototype.setSendtime = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string text = 7;
 * @return {string}
 */
proto.S2CSocializeChatAck.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.S2CSocializeChatAck} returns this
 */
proto.S2CSocializeChatAck.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string voiceId = 8;
 * @return {string}
 */
proto.S2CSocializeChatAck.prototype.getVoiceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.S2CSocializeChatAck} returns this
 */
proto.S2CSocializeChatAck.prototype.setVoiceid = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int32 voiceDuration = 9;
 * @return {number}
 */
proto.S2CSocializeChatAck.prototype.getVoiceduration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2CSocializeChatAck} returns this
 */
proto.S2CSocializeChatAck.prototype.setVoiceduration = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 chat_type = 10;
 * @return {number}
 */
proto.S2CSocializeChatAck.prototype.getChatType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2CSocializeChatAck} returns this
 */
proto.S2CSocializeChatAck.prototype.setChatType = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgSocializeRoleUnit.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgSocializeRoleUnit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgSocializeRoleUnit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgSocializeRoleUnit.toObject = function(includeInstance, msg) {
  var f, obj = {
    roleid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    rolename: jspb.Message.getFieldWithDefault(msg, 2, ""),
    icon: jspb.Message.getFieldWithDefault(msg, 3, 0),
    level: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgSocializeRoleUnit}
 */
proto.MsgSocializeRoleUnit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgSocializeRoleUnit;
  return proto.MsgSocializeRoleUnit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgSocializeRoleUnit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgSocializeRoleUnit}
 */
proto.MsgSocializeRoleUnit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoleid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRolename(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIcon(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgSocializeRoleUnit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgSocializeRoleUnit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgSocializeRoleUnit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgSocializeRoleUnit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoleid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRolename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIcon();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 roleId = 1;
 * @return {number}
 */
proto.MsgSocializeRoleUnit.prototype.getRoleid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgSocializeRoleUnit} returns this
 */
proto.MsgSocializeRoleUnit.prototype.setRoleid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string roleName = 2;
 * @return {string}
 */
proto.MsgSocializeRoleUnit.prototype.getRolename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.MsgSocializeRoleUnit} returns this
 */
proto.MsgSocializeRoleUnit.prototype.setRolename = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 icon = 3;
 * @return {number}
 */
proto.MsgSocializeRoleUnit.prototype.getIcon = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgSocializeRoleUnit} returns this
 */
proto.MsgSocializeRoleUnit.prototype.setIcon = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 level = 4;
 * @return {number}
 */
proto.MsgSocializeRoleUnit.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgSocializeRoleUnit} returns this
 */
proto.MsgSocializeRoleUnit.prototype.setLevel = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.C2SChatHistoryReq.prototype.toObject = function(opt_includeInstance) {
  return proto.C2SChatHistoryReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.C2SChatHistoryReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SChatHistoryReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.C2SChatHistoryReq}
 */
proto.C2SChatHistoryReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.C2SChatHistoryReq;
  return proto.C2SChatHistoryReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.C2SChatHistoryReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.C2SChatHistoryReq}
 */
proto.C2SChatHistoryReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.C2SChatHistoryReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.C2SChatHistoryReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.C2SChatHistoryReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SChatHistoryReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChatContent.prototype.toObject = function(opt_includeInstance) {
  return proto.ChatContent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChatContent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatContent.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sendtime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    chatType: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChatContent}
 */
proto.ChatContent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChatContent;
  return proto.ChatContent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChatContent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChatContent}
 */
proto.ChatContent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSendtime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChatType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChatContent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChatContent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChatContent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatContent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSendtime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getChatType();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.ChatContent.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ChatContent} returns this
 */
proto.ChatContent.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 sendTime = 2;
 * @return {number}
 */
proto.ChatContent.prototype.getSendtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ChatContent} returns this
 */
proto.ChatContent.prototype.setSendtime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 chat_type = 3;
 * @return {number}
 */
proto.ChatContent.prototype.getChatType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ChatContent} returns this
 */
proto.ChatContent.prototype.setChatType = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChatHistoryItem.prototype.toObject = function(opt_includeInstance) {
  return proto.ChatHistoryItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChatHistoryItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatHistoryItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromrole: (f = msg.getFromrole()) && proto.MsgSocializeRoleUnit.toObject(includeInstance, f),
    content: (f = msg.getContent()) && proto.ChatContent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChatHistoryItem}
 */
proto.ChatHistoryItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChatHistoryItem;
  return proto.ChatHistoryItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChatHistoryItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChatHistoryItem}
 */
proto.ChatHistoryItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MsgSocializeRoleUnit;
      reader.readMessage(value,proto.MsgSocializeRoleUnit.deserializeBinaryFromReader);
      msg.setFromrole(value);
      break;
    case 2:
      var value = new proto.ChatContent;
      reader.readMessage(value,proto.ChatContent.deserializeBinaryFromReader);
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChatHistoryItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChatHistoryItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChatHistoryItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatHistoryItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromrole();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MsgSocializeRoleUnit.serializeBinaryToWriter
    );
  }
  f = message.getContent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ChatContent.serializeBinaryToWriter
    );
  }
};


/**
 * optional MsgSocializeRoleUnit fromRole = 1;
 * @return {?proto.MsgSocializeRoleUnit}
 */
proto.ChatHistoryItem.prototype.getFromrole = function() {
  return /** @type{?proto.MsgSocializeRoleUnit} */ (
    jspb.Message.getWrapperField(this, proto.MsgSocializeRoleUnit, 1));
};


/**
 * @param {?proto.MsgSocializeRoleUnit|undefined} value
 * @return {!proto.ChatHistoryItem} returns this
*/
proto.ChatHistoryItem.prototype.setFromrole = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ChatHistoryItem} returns this
 */
proto.ChatHistoryItem.prototype.clearFromrole = function() {
  return this.setFromrole(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ChatHistoryItem.prototype.hasFromrole = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ChatContent content = 2;
 * @return {?proto.ChatContent}
 */
proto.ChatHistoryItem.prototype.getContent = function() {
  return /** @type{?proto.ChatContent} */ (
    jspb.Message.getWrapperField(this, proto.ChatContent, 2));
};


/**
 * @param {?proto.ChatContent|undefined} value
 * @return {!proto.ChatHistoryItem} returns this
*/
proto.ChatHistoryItem.prototype.setContent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ChatHistoryItem} returns this
 */
proto.ChatHistoryItem.prototype.clearContent = function() {
  return this.setContent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ChatHistoryItem.prototype.hasContent = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.S2CChatHistoryACK.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.S2CChatHistoryACK.prototype.toObject = function(opt_includeInstance) {
  return proto.S2CChatHistoryACK.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.S2CChatHistoryACK} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2CChatHistoryACK.toObject = function(includeInstance, msg) {
  var f, obj = {
    errcode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.ChatHistoryItem.toObject, includeInstance),
    totalNum: jspb.Message.getFieldWithDefault(msg, 3, 0),
    startIndex: jspb.Message.getFieldWithDefault(msg, 4, 0),
    count: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.S2CChatHistoryACK}
 */
proto.S2CChatHistoryACK.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.S2CChatHistoryACK;
  return proto.S2CChatHistoryACK.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.S2CChatHistoryACK} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.S2CChatHistoryACK}
 */
proto.S2CChatHistoryACK.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrcode(value);
      break;
    case 2:
      var value = new proto.ChatHistoryItem;
      reader.readMessage(value,proto.ChatHistoryItem.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalNum(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartIndex(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.S2CChatHistoryACK.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.S2CChatHistoryACK.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.S2CChatHistoryACK} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2CChatHistoryACK.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrcode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.ChatHistoryItem.serializeBinaryToWriter
    );
  }
  f = message.getTotalNum();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getStartIndex();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional int32 errCode = 1;
 * @return {number}
 */
proto.S2CChatHistoryACK.prototype.getErrcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2CChatHistoryACK} returns this
 */
proto.S2CChatHistoryACK.prototype.setErrcode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated ChatHistoryItem data = 2;
 * @return {!Array<!proto.ChatHistoryItem>}
 */
proto.S2CChatHistoryACK.prototype.getDataList = function() {
  return /** @type{!Array<!proto.ChatHistoryItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ChatHistoryItem, 2));
};


/**
 * @param {!Array<!proto.ChatHistoryItem>} value
 * @return {!proto.S2CChatHistoryACK} returns this
*/
proto.S2CChatHistoryACK.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ChatHistoryItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ChatHistoryItem}
 */
proto.S2CChatHistoryACK.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ChatHistoryItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.S2CChatHistoryACK} returns this
 */
proto.S2CChatHistoryACK.prototype.clearDataList = function() {
  return this.setDataList([]);
};


/**
 * optional int32 total_num = 3;
 * @return {number}
 */
proto.S2CChatHistoryACK.prototype.getTotalNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2CChatHistoryACK} returns this
 */
proto.S2CChatHistoryACK.prototype.setTotalNum = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 start_index = 4;
 * @return {number}
 */
proto.S2CChatHistoryACK.prototype.getStartIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2CChatHistoryACK} returns this
 */
proto.S2CChatHistoryACK.prototype.setStartIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 count = 5;
 * @return {number}
 */
proto.S2CChatHistoryACK.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.S2CChatHistoryACK} returns this
 */
proto.S2CChatHistoryACK.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LoadChatHistoryOver.prototype.toObject = function(opt_includeInstance) {
  return proto.LoadChatHistoryOver.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LoadChatHistoryOver} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LoadChatHistoryOver.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LoadChatHistoryOver}
 */
proto.LoadChatHistoryOver.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LoadChatHistoryOver;
  return proto.LoadChatHistoryOver.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LoadChatHistoryOver} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LoadChatHistoryOver}
 */
proto.LoadChatHistoryOver.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LoadChatHistoryOver.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LoadChatHistoryOver.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LoadChatHistoryOver} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LoadChatHistoryOver.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.SystemNoticeType = {
  SYSTEM_NOTICE_TYPE_MARQUEE: 0,
  SYSTEM_NOTICE_TYPE_SYSTEM: 1,
  SYSTEM_NOTICE_TYPE_INFORM: 2
};

/**
 * @enum {number}
 */
proto.SOCIALIZECHATCHANNELTYPE = {
  SOCIALIZE_CHAT_CHANNEL_TYPE_SYSTEM: 0,
  SOCIALIZE_CHAT_CHANNEL_TYPE_WORLD: 1,
  SOCIALIZE_CHAT_CHANNEL_TYPE_AREA: 2,
  SOCIALIZE_CHAT_CHANNEL_TYPE_NEARBY: 3,
  SOCIALIZE_CHAT_CHANNEL_TYPE_GROUP: 4,
  SOCIALIZE_CHAT_CHANNEL_TYPE_PRIVATE: 5
};

/**
 * @enum {number}
 */
proto.SOCIALIZECHATTYPE = {
  SOCIALIZE_CHAT_TYPE_TEXT: 0,
  SOCIALIZE_CHAT_TYPE_EMOTE: 1
};

// goog.object.extend(exports, proto);
export default proto;//Âêé
